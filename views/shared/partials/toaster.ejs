<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" integrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA==" crossorigin="anonymous" referrerpolicy="no-referrer" />
<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap">

<style>
/* Toast container with fixed positioning and overflow handling */
.toast-container {
    position: fixed;
    top: 0rem;
    right: 0rem;
    z-index: 9999;
    pointer-events: none;
    padding: 0.75rem;
    font-family: 'Inter', sans-serif;
}

/* Base toast styles with enhanced glassmorphism and shadow */
.toast {
    position: relative;
    pointer-events: auto;
    opacity: 0;
    transform: translateY(-30px) scale(0.95);
    transition: all 0.4s cubic-bezier(0.34, 1.56, 0.64, 1);
    /* border-radius: 16px; */
    backdrop-filter: blur(16px);
    -webkit-backdrop-filter: blur(16px);
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2), 0 2px 8px rgba(0, 0, 0, 0.1);
    overflow: hidden;
    border: 1px solid rgba(255, 255,  255, 0.1);
}

/* Show animation state with bounce effect */
.toast.show {
    opacity: 1;
    transform: translateY(0) scale(1);
}

/* Exit animation state with fade and slide */
.toast-exit {
    opacity: 0;
    transform: translateY(-30px) scale(0.95);
}

/* Type-specific styles with solid colors */
.toast-success {
    background: rgba(34, 197, 94, 0.9);
    color: #ffffff;
}

.toast-error {
    background: rgba(200, 0, 0, 0.9);
    color: #ffffff;
}

.toast-info {
    background: rgba(0, 102, 255, 0.9);
    color: #ffffff;
}

.toast-warning {
    background: rgba(255, 120, 0, 0.9);
    color: #ffffff;
}

/* Icon styles with pulse animation on show */
.icon-success, .icon-error, .icon-info, .icon-warning {
    color: #ffffff;
    transition: transform 0.3s ease, opacity 0.3s ease;
}

.toast.show .icon-success, 
.toast.show .icon-error, 
.toast.show .icon-info, 
.toast.show .icon-warning {
    animation: pulse 0.5s ease-in-out;
}

@keyframes pulse {
    0%, 100% { transform: scale(1); }
    50% { transform: scale(1.2); }
}

/* Close button with enhanced hover effect */
.close-btn {
    color: rgba(255, 255, 255, 0.85);
    transition: all 0.3s ease;
    font-size: 1.1rem;
    line-height: 1;
    cursor: pointer;
    background: none;
    border: none;
    padding: 0.5rem;
    border-radius: 50%;
}

.close-btn:hover {
    color: #ffffff;
    background: rgba(0, 0, 0, 0.2);
    transform: rotate(180deg);
}

/* Progress bar with smooth solid color animation */
.progress-bar {
    height: 5px;
    width: 100%;
    background: rgba(255, 255, 255, 0.95);
    transition: width 6s linear;
    position: absolute;
    bottom: 0;
    left: 0;
}

.progress-bg {
    background: rgba(0, 0, 0, 0.25);
    height: 5px;
    width: 100%;
    position: absolute;
    bottom: 0;
    left: 0;
}

/* Responsive design for smaller screens */
@media (max-width: 640px) {
    .toast-container {
        top: 0.75rem;
        right: 0.75rem;
        max-width: calc(100% - 1.5rem);
        padding: 0.5rem;
    }
    
    .toast {
        border-radius: 12px;
        transform: translateY(-20px) scale(0.95);
    }

    .toast.show {
        transform: translateY(0) scale(1);
    }
}
</style>

<div class="toast-container" id="toastContainer"></div>

<script>
class ToastNotification extends HTMLElement {
    constructor() {
        super();
        this.attachShadow({ mode: 'open' });
    }

    showToast(message, type = 'info', duration = 6000) {
        const validTypes = ['success', 'error', 'info', 'warning'];
        const toastType = validTypes.includes(type) ? type : 'info';

        const typeConfig = {
            success: {
                class: 'toast-success',
                iconClass: 'icon-success',
                icon: `<i class="fas fa-check-circle" style="font-size: 1.5rem; margin-right: 0.75rem;"></i>`
            },
            error: {
                class: 'toast-error',
                iconClass: 'icon-error',
                icon: `<i class="fas fa-times-circle" style="font-size: 1.5rem; margin-right: 0.75rem;"></i>`
            },
            info: {
                class: 'toast-info',
                iconClass: 'icon-info',
                icon: `<i class="fas fa-info-circle" style="font-size: 1.5rem; margin-right: 0.75rem;"></i>`
            },
            warning: {
                class: 'toast-warning',
                iconClass: 'icon-warning',
                icon: `<i class="fas fa-exclamation-circle" style="font-size: 1.5rem; margin-right: 0.75rem;"></i>`
            }
        };

        const config = typeConfig[toastType];

        const toast = document.createElement('div');
        toast.id = `toast-${Date.now()}-${Math.random().toString(36).slice(2, 9)}`;
        toast.className = `toast ${config.class}`;
        toast.setAttribute('role', 'alert');
        toast.setAttribute('aria-live', 'assertive');
        toast.setAttribute('aria-atomic', 'true');

        toast.innerHTML = `
            <div style="display: flex; align-items: center; padding: 1.25rem; position: relative; z-index: 1;">
                <div class="${config.iconClass}" style="flex-shrink: 0;">
                    ${config.icon}
                </div>
                <div style="flex: 1; font-size: 0.95rem; font-weight: 500; color: #ffffff; margin-left: 0.75rem; line-height: 1.5;">
                    ${message}
                </div>
                <button type="button" class="close-btn" style="margin-left: 1rem;" onclick="this.closest('.toast').classList.add('toast-exit'); setTimeout(() => this.closest('.toast').remove(), 400);">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="progress-bg">
                <div class="progress-bar"></div>
            </div>
        `;

        const container = document.getElementById('toastContainer');
        container.appendChild(toast);

        // Trigger show animation and progress bar
        requestAnimationFrame(() => {
            toast.classList.add('show');
            const progressBar = toast.querySelector('.progress-bar');
            if (progressBar) {
                progressBar.style.transition = `width ${duration}ms linear`;
                progressBar.style.width = '0%';
            }
        });

        // Auto-dismiss after specified duration
        setTimeout(() => {
            toast.classList.add('toast-exit');
            setTimeout(() => toast.remove(), 400);
        }, duration);
    }
}

customElements.define('toast-notification', ToastNotification);

const toast = new ToastNotification();

// Check for session messages on page load
document.addEventListener('DOMContentLoaded', () => {
    const message = '<%= message %>';
    const type = '<%= type %>';
    if (message && type && message !== 'undefined' && type !== 'undefined') {
        toast.showToast(message, type);
        fetch('/clear-session-message', { method: 'POST' })
            .then(() => console.log('Session message cleared'))
            .catch(err => console.error('Error clearing session message:', err));
    }
});
</script>