<!DOCTYPE html>
<html lang="en">
<%- include('../partials/Header') %>

<body>
    <div id="container-wrapper">
        <div id="dashboard" class="dashboard-container">
            <%- include('../partials/Navbar') %>
            <%- include('../partials/Sidebar') %>
            <div class="db-info-wrap db-add-tour-wrap p-4">
                <div id="form-error" class="text-danger d-none mt-3"></div>
                <form id="add-package-form" action="/add-package" method="post" enctype="multipart/form-data">
                    <div class="row">
                        <div class="col-lg-8 col-xl-9">
                            <!-- Basic Information -->
                            <div class="dashboard-box mb-4 border rounded p-4 bg-white">
                                <div class="custom-field-wrap">
                                    <h4 class="mb-3">Basic Information</h4>
                                    <div class="form-group mb-3">
                                        <label for="title" class="form-label required-field">Title</label>
                                        <input type="text" name="title" id="title" class="form-control" required>
                                    </div>
                                    <div class="form-group mb-3">
                                        <label for="packageType" class="form-label required-field">Package Type</label>
                                        <select name="packageType" id="packageType" class="form-control" required>
                                            <option value="Adventure">Adventure</option>
                                            <option value="Cultural">Cultural</option>
                                            <option value="Luxury">Luxury</option>
                                            <option value="Family">Family</option>
                                            <option value="Wellness">Wellness</option>
                                            <option value="Eco">Eco</option>
                                        </select>
                                    </div>
                                    <div class="form-group mb-3">
                                        <label for="description" class="form-label required-field">Description</label>
                                        <textarea name="description" id="description" class="form-control" rows="5" required></textarea>
                                    </div>
                                </div>
                            </div>

                            <!-- Departures -->
                            <div class="dashboard-box mb-4 border rounded p-4 bg-white">
                                <div class="custom-field-wrap">
                                    <div class="d-flex justify-content-between align-items-center mb-3">
                                        <h4 class="mb-0">Departures</h4>
                                        <span id="add-departure" class="btn btn-outline-success btn-sm rounded-0 px-3">Add Departure</span>
                                    </div>
                                    <div id="departures">
                                        <div class="departure-entry mb-3 d-flex align-items-center">
                                            <div class="flex-grow-1 me-2">
                                                <div class="form-group">
                                                    <label for="departureLocation0" class="form-label required-field">Departure Location</label>
                                                    <input type="text" name="multipleDepartures[0][location]" id="departureLocation0" class="form-control" required>
                                                </div>
                                            </div>
                                            <div class="me-2">
                                                <div class="form-group">
                                                    <label for="departureDateTime0" class="form-label required-field">Departure Date and Time</label>
                                                    <input type="datetime-local" name="multipleDepartures[0][dateTime]" id="departureDateTime0" class="form-control" required>
                                                </div>
                                            </div>
                                            <div>
                                                <i class="fas fa-trash text-danger delete-departure" style="font-size: 18px; cursor: pointer; display: none;"></i>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Dates and Prices -->
                            <div class="dashboard-box mb-4 border rounded p-4 bg-white">
                                <div class="custom-field-wrap">
                                    <h4 class="mb-3">Dates and Prices</h4>
                                    <div class="row">
                                        <div class="col-sm-6 mb-3">
                                            <div class="form-group">
                                                <label for="groupSize" class="form-label">Group Size</label>
                                                <input type="number" name="groupSize" id="groupSize" class="form-control" placeholder="No of Pax">
                                            </div>
                                        </div>
                                        <div class="col-sm-6 mb-3">
                                            <div class="row">
                                                <div class="col-6">
                                                    <div class="form-group">
                                                        <label for="days" class="form-label">Trip Duration(Days)</label>
                                                        <input type="number" name="tripDuration[days]" id="days" class="form-control" placeholder="Days">
                                                    </div>
                                                </div>
                                                <div class="col-6">
                                                    <div class="form-group">
                                                        <label for="nights" class="form-label">Trip Duration(Nights)</label>
                                                        <input type="number" name="tripDuration[nights]" id="nights" class="form-control" placeholder="Nights">
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-sm-4 mb-3">
                                            <div class="form-group">
                                                <label for="category" class="form-label">Category</label>
                                                <select name="category" id="category" class="form-control">
                                                    <option value="Adult">Adult</option>
                                                    <option value="Child">Child</option>
                                                    <option value="Couple">Couple</option>
                                                </select>
                                            </div>
                                        </div>
                                        <div class="col-sm-3 mb-3">
                                            <div class="form-group">
                                                <label for="regularPrice" class="form-label">Regular Price</label>
                                                <input type="number" name="regularPrice" id="regularPrice" class="form-control">
                                            </div>
                                        </div>
                                        <div class="col-sm-3 mb-3">
                                            <div class="form-group">
                                                <label for="salePrice" class="form-label">Sale Price</label>
                                                <input type="number" name="salePrice" id="salePrice" class="form-control">
                                            </div>
                                        </div>
                                        <div class="col-sm-2 mb-3">
                                            <div class="form-group">
                                                <label for="discount" class="form-label">Discount</label>
                                                <input type="number" name="discount" id="discount" class="form-control">
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Itinerary -->
                            <div class="dashboard-box mb-4 border rounded p-4 bg-white">
                                <div class="custom-field-wrap">
                                    <div class="d-flex justify-content-between align-items-center mb-3">
                                        <h4 class="mb-0">Itinerary (<span id="total-days">0</span> days)</h4>
                                    </div>
                                    <div class="form-group mb-3">
                                        <label for="itineraryDescription" class="form-label">Itinerary Description</label>
                                        <textarea name="itineraryDescription" id="itineraryDescription" class="form-control" rows="4"></textarea>
                                    </div>
                                    <div id="itinerarySection">
                                        <div id="itinerary-days"></div>
                                    </div>
                                </div>
                            </div>

                            <!-- Program -->
                            <div class="dashboard-box mb-4 border rounded p-4 bg-white">
                                <div class="custom-field-wrap">
                                    <div class="d-flex justify-content-between align-items-center mb-3">
                                        <h4 class="mb-0">Program (<span id="total-program-days">0</span> days)</h4>
                                        <span id="add-program-day" class="btn btn-outline-success btn-sm rounded-0 px-3">Add Program Day</span>
                                    </div>
                                    <div class="form-group mb-3">
                                        <label for="programDescription" class="form-label">Program Description</label>
                                        <textarea name="programDescription" id="programDescription" class="form-control" rows="4"></textarea>
                                    </div>
                                    <div id="programDays"></div>
                                </div>
                            </div>

                            <!-- Inclusions -->
                            <div class="dashboard-box mb-4 border rounded p-4 bg-white">
                                <div class="custom-field-wrap">
                                    <div class="d-flex justify-content-between align-items-center mb-3">
                                        <h4 class="mb-0">Inclusions</h4>
                                        <span id="add-inclusion" class="btn btn-outline-success btn-sm rounded-0 px-3">Add Inclusion</span>
                                    </div>
                                    <div id="inclusions">
                                        <div class="inclusion-entry mb-3 d-flex align-items-center">
                                            <div class="flex-grow-1 me-2">
                                                <input type="text" name="inclusions[0]" class="form-control" placeholder="e.g., Meals">
                                            </div>
                                            <div>
                                                <i class="fas fa-trash text-danger delete-inclusion" style="font-size: 18px; cursor: pointer; display: none;"></i>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Exclusions -->
                            <div class="dashboard-box mb-4 border rounded p-4 bg-white">
                                <div class="custom-field-wrap">
                                    <div class="d-flex justify-content-between align-items-center mb-3">
                                        <h4 class="mb-0">Exclusions</h4>
                                        <span id="add-exclusion" class="btn btn-outline-success btn-sm rounded-0 px-3">Add Exclusion</span>
                                    </div>
                                    <div id="exclusions">
                                        <div class="exclusion-entry mb-3 d-flex align-items-center">
                                            <div class="flex-grow-1 me-2">
                                                <input type="text" name="exclusions[0]" class="form-control" placeholder="e.g., Airfare">
                                            </div>
                                            <div>
                                                <i class="fas fa-trash text-danger delete-exclusion" style="font-size: 18px; cursor: pointer; display: none;"></i>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Activity Types -->
                            <div class="dashboard-box mb-4 border rounded p-4 bg-white">
                                <div class="custom-field-wrap">
                                    <div class="d-flex justify-content-between align-items-center mb-3">
                                        <h4 class="mb-0">Activity Types</h4>
                                        <span id="add-activityType" class="btn btn-outline-success btn-sm rounded-0 px-3">Add Activity Type</span>
                                    </div>
                                    <div id="activityTypes">
                                        <div class="activityType-entry mb-3 d-flex align-items-center">
                                            <div class="flex-grow-1 me-2">
                                                <input type="text" name="activityTypes[0]" class="form-control" placeholder="e.g., Hiking">
                                            </div>
                                            <div>
                                                <i class="fas fa-trash text-danger delete-activityType" style="font-size: 18px; cursor: pointer; display: none;"></i>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Highlights -->
                            <div class="dashboard-box mb-4 border rounded p-4 bg-white">
                                <div class="custom-field-wrap">
                                    <div class="d-flex justify-content-between align-items-center mb-3">
                                        <h4 class="mb-0">Highlights</h4>
                                        <span id="add-highlight" class="btn btn-outline-success btn-sm rounded-0 px-3">Add Highlight</span>
                                    </div>
                                    <div id="highlights">
                                        <div class="highlight-entry mb-3 d-flex align-items-center">
                                            <div class="flex-grow-1 me-2">
                                                <input type="text" name="highlights[0]" class="form-control" placeholder="e.g., Scenic views">
                                            </div>
                                            <div>
                                                <i class="fas fa-trash text-danger delete-highlight" style="font-size: 18px; cursor: pointer; display: none;"></i>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Gallery -->
                            <div class="dashboard-box mb-4 border rounded p-4 bg-white">
                                <h4 class="mb-3">Gallery (Max 8 Images)</h4>
                                <div class="custom-field-wrap">
                                    <div class="dragable-field border border-dashed p-4 text-center">
                                        <div class="dragable-field-inner">
                                            <p class="drag-drop-info">Drop Files To Upload (Max 8)</p>
                                            <p>or</p>
                                            <div class="upload-input">
                                                <div class="form-group">
                                                    <label for="gallery-input" class="upload-btn btn btn-success">Upload Images</label>
                                                    <input type="file" id="gallery-input" name="gallery" multiple accept="image/*" class="d-none">
                                                </div>
                                            </div>
                                            <div id="gallery-preview" class="mt-3 row"></div>
                                            <p id="gallery-error" class="text-danger d-none mt-2">Maximum 8 images allowed.</p>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Location -->
                            <div class="dashboard-box mb-4 border rounded p-4 bg-white">
                                <h4 class="mb-3">Location</h4>
                                <div class="custom-field-wrap">
                                    <div class="form-group mb-3">
                                        <label for="location-search" class="form-label">Search Destination Address and Country</label>
                                        <input type="text" id="location-search" class="form-control" placeholder="Search for a place">
                                    </div>
                                    <input type="hidden" name="latitude" id="latitude">
                                    <input type="hidden" name="longitude" id="longitude">
                                    <input type="hidden" name="destinationAddress" id="destinationAddress">
                                    <input type="hidden" name="destinationCountry" id="destinationCountry">
                                    <div id="map" style="height: 400px; width: 100%; margin-top: 20px;" class="border rounded"></div>
                                </div>
                            </div>
                        </div>

                        <!-- Sidebar -->
                        <div class="col-lg-4 col-xl-3">
                            <!-- Additional Categories -->
                            <div class="dashboard-box mb-4 border rounded p-4 bg-white">
                                <div class="custom-field-wrap db-cat-field-wrap">
                                    <h4 class="mb-3">Additional Categories</h4>
                                    <div id="category-list">
                                        <div class="form-group mb-2">
                                            <label class="custom-input">
                                                <input type="checkbox" name="additionalCategories[]" value="Hotel">
                                                <span class="custom-input-field"></span>
                                                Hotel
                                            </label>
                                        </div>
                                        <div class="form-group mb-2">
                                            <label class="custom-input">
                                                <input type="checkbox" name="additionalCategories[]" value="Walking">
                                                <span class="custom-input-field"></span>
                                                Walking
                                            </label>
                                        </div>
                                    </div>
                                    <span id="add-category-btn" class="btn btn-outline-success btn-sm rounded-0 px-3 mt-2 d-inline-block">Add Category</span>
                                    <div id="new-category-input" class="d-none mt-2">
                                        <div class="form-group">
                                            <input type="text" id="new-category" class="form-control" placeholder="New category">
                                            <button type="button" id="add-category-submit" class="btn btn-primary mt-2">Add</button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Keywords -->
                            <div class="dashboard-box mb-4 border rounded p-4 bg-white">
                                <div class="custom-field-wrap db-pop-field-wrap">
                                    <h4 class="mb-3">Keywords</h4>
                                    <div class="form-group">
                                        <label for="keywords" class="form-label">Keywords</label>
                                        <input type="text" name="keywords" id="keywords" class="form-control" placeholder="Comma-separated keywords">
                                    </div>
                                </div>
                            </div>

                            <!-- Featured Image -->
                            <div class="dashboard-box mb-4 border rounded p-4 bg-white">
                                <div class="custom-field-wrap db-media-field-wrap">
                                    <h4 class="mb-3">Add Featured Image</h4>
                                    <div class="upload-input">
                                        <div class="form-group">
                                            <label for="featured-input" class="upload-btn btn btn-success">Upload a Featured Image</label>
                                            <input type="file" id="featured-input" name="featuredImage" accept="image/*" class="d-none">
                                        </div>
                                    </div>
                                    <div id="featured-file-name" class="mt-2 text-dark">No file selected</div>
                                </div>
                            </div>

                            <!-- Quote and Difficulty Level -->
                            <div class="dashboard-box mb-4 border rounded p-4 bg-white">
                                <div class="custom-field-wrap">
                                    <h4 class="mb-3">Quote</h4>
                                    <div id="quotes">
                                        <div class="quote-entry mb-3">
                                            <div class="form-group">
                                                <label for="quote" class="form-label">Quote</label>
                                                <input type="text" name="quote" id="quote" class="form-control" placeholder="e.g., Explore the world">
                                            </div>
                                        </div>
                                    </div>
                                    <div class="form-group mt-3">
                                        <label for="difficultyLevel" class="form-label">Difficulty Level</label>
                                        <select name="difficultyLevel" id="difficultyLevel" class="form-control">
                                            <option value="Easy">Easy</option>
                                            <option value="Moderate" selected>Moderate</option>
                                            <option value="Challenging">Challenging</option>
                                        </select>
                                    </div>
                                </div>
                            </div>

                            <!-- Publish Status -->
                            <div class="dashboard-box mb-4 border rounded p-4 bg-white">
                                <div class="custom-field-wrap">
                                    <h4 class="mb-3">Publish Status</h4>
                                    <div class="form-group mb-3">
                                        <label for="status" class="form-label required-field">Status</label>
                                        <select name="status" id="status" class="form-control" required>
                                            <option value="Pending" selected>Draft</option>
                                            <option value="Active">Publish</option>
                                            <option value="Expired">Expired</option>
                                        </select>
                                    </div>
                                    <div class="form-group">
                                        <button type="submit" class="btn btn-primary w-100">Save Package</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
            <div class="copyrights text-center mt-4">
                Copyright © 2025 Travele. All rights reserved.
            </div>
        </div>

        <style>
            .btn-draft {
                background-color: #6b7280 !important;
                color: white !important;
                border: 1px solid #4b5563;
                padding: 10px 20px;
                cursor: pointer;
                width: 100%;
                border-radius: 4px;
                transition: background-color 0.3s;
            }

            .btn-draft:hover {
                background-color: #4b5563 !important;
            }

            .btn-publish {
                background-color: #1d4ed8 !important;
                color: white !important;
                border: 1px solid #1e40af;
                padding: 10px 20px;
                cursor: pointer;
                width: 100%;
                border-radius: 4px;
                transition: background-color 0.3s;
            }

            .btn-publish:hover {
                background-color: #1e40af !important;
            }

            .upload-btn {
                background-color: #10b981 !important;
                color: white !important;
                padding: 8px 16px;
                border-radius: 4px;
                text-decoration: none;
                cursor: pointer;
            }

            .upload-btn:hover {
                background-color: #059669 !important;
            }

            .delete-departure,
            .delete-inclusion,
            .delete-exclusion,
            .delete-activityType,
            .delete-highlight,
            .delete-itinerary-row,
            .delete-gallery,
            .delete-program-day {
                color: #dc3545 !important;
                font-size: 18px;
                cursor: pointer;
            }

            .delete-departure:hover,
            .delete-inclusion:hover,
            .delete-exclusion:hover,
            .delete-activityType:hover,
            .delete-highlight:hover,
            .delete-itinerary-row:hover,
            .delete-gallery:hover,
            .delete-program-day:hover {
                color: #b02a37 !important;
            }

            .departure-entry,
            .inclusion-entry,
            .exclusion-entry,
            .activityType-entry,
            .highlight-entry,
            .program-day-entry {
                gap: 10px;
            }

            .form-control:invalid {
                border-color: #dc3545;
            }

            .form-control:valid {
                border-color: #28a745;
            }

            .gallery-img {
                width: 100px;
                height: 100px;
                object-fit: cover;
                border-radius: 4px;
                margin-right: 10px;
            }

            .required-field::after {
                content: '*';
                color: #dc3545;
                margin-left: 4px;
            }

            .itinerary-activities {
                margin-left: 20px;
            }

            .itinerary-item, .program-day-entry {
                border: 1px solid #dee2e6;
                padding: 15px;
                border-radius: 4px;
            }

            /* Ensure red border for invalid inputs */
            .form-control.is-invalid {
                border-color: #dc3545 !important;
                background-image: none !important;
            }

            .form-control.is-invalid:focus {
                border-color: #dc3545 !important;
                box-shadow: 0 0 0 0.25rem rgba(220, 53, 69, 0.25) !important;
            }
        </style>
    <%- include('../../shared/partials/toaster') %>

        <%- include('../partials/script.ejs') %>
        <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
        <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
        <script src="https://kit.fontawesome.com/a076d05399.js"></script>

        <script>
            document.addEventListener('DOMContentLoaded', () => {
                const daysInput = document.getElementById('days');
                const nightsInput = document.getElementById('nights');
                const totalDaysSpan = document.getElementById('total-days');
                const totalProgramDaysSpan = document.getElementById('total-program-days');
                const itineraryDays = document.getElementById('itinerary-days');
                const programDays = document.getElementById('programDays');
                const addProgramDayLink = document.getElementById('add-program-day');
                const addCategoryBtn = document.getElementById('add-category-btn');
                const newCategoryInput = document.getElementById('new-category-input');
                const newCategoryField = document.getElementById('new-category');
                const addCategorySubmit = document.getElementById('add-category-submit');
                const categoryList = document.getElementById('category-list');
                const galleryInput = document.getElementById('gallery-input');
                const galleryError = document.getElementById('gallery-error');
                const galleryPreview = document.getElementById('gallery-preview');
                const featuredInput = document.getElementById('featured-input');
                const featuredFileName = document.getElementById('featured-file-name');
                const form = document.getElementById('add-package-form');
                const formError = document.getElementById('form-error');
                const locationSearch = document.getElementById('location-search');
                const latitudeInput = document.getElementById('latitude');
                const longitudeInput = document.getElementById('longitude');
                const destinationAddressInput = document.getElementById('destinationAddress');
                const destinationCountryInput = document.getElementById('destinationCountry');
                const addDepartureLink = document.getElementById('add-departure');
                const departuresContainer = document.getElementById('departures');
                const addInclusionLink = document.getElementById('add-inclusion');
                const inclusionsContainer = document.getElementById('inclusions');
                const addExclusionLink = document.getElementById('add-exclusion');
                const exclusionsContainer = document.getElementById('exclusions');
                const addActivityTypeLink = document.getElementById('add-activityType');
                const activityTypesContainer = document.getElementById('activityTypes');
                const addHighlightLink = document.getElementById('add-highlight');
                const highlightsContainer = document.getElementById('highlights');
                const statusSelect = document.getElementById('status');
                const keywordsInput = document.getElementById('keywords');

                // OpenCage API key (replace with your actual key or ensure it's passed correctly)
                const OPENCAGE_API_KEY = '<%= opencageApiKey %>';

                // Function to toggle required fields based on status
                const toggleRequiredFields = () => {
                    const isPublish = statusSelect.value === 'Active';
                    const fields = [
                        { id: 'groupSize', label: 'Group Size' },
                        { id: 'days', label: 'Trip Duration(Days)' },
                        { id: 'nights', label: 'Trip Duration(Nights)' },
                        { id: 'category', label: 'Category' },
                        { id: 'regularPrice', label: 'Regular Price' },
                        { id: 'itineraryDescription', label: 'Itinerary Description' },
                        { id: 'programDescription', label: 'Program Description' },
                        { id: 'keywords', label: 'Keywords' },
                        { id: 'difficultyLevel', label: 'Difficulty Level' },
                        { id: 'location-search', label: 'Search Destination Address and Country' },
                        { id: 'gallery-input', label: 'Upload Images' },
                        { id: 'featured-input', label: 'Upload a Featured Image' },
                        { id: 'quote', label: 'Quote' }
                    ];

                    fields.forEach(field => {
                        const input = document.getElementById(field.id);
                        const label = document.querySelector(`label[for="${field.id}"]`);
                        if (input && label) {
                            if (isPublish) {
                                input.setAttribute('required', '');
                                label.classList.add('required-field');
                                if (field.id === 'keywords' && !input.value.trim()) {
                                    input.classList.add('is-invalid');
                                }
                            } else {
                                input.removeAttribute('required');
                                label.classList.remove('required-field');
                                if (field.id === 'keywords') {
                                    input.classList.remove('is-invalid');
                                }
                            }
                        } else {
                            console.warn(`Field or label for ${field.id} not found`);
                        }
                    });

                    // Handle dynamic fields (inclusions, exclusions, activityTypes, highlights)
                    const dynamicContainers = [
                        { container: 'inclusions', name: 'inclusions', label: 'Inclusion' },
                        { container: 'exclusions', name: 'exclusions', label: 'Exclusion' },
                        { container: 'activityTypes', name: 'activityTypes', label: 'Activity Type' },
                        { container: 'highlights', name: 'highlights', label: 'Highlight' }
                    ];

                    dynamicContainers.forEach(({ container, name }) => {
                        const containerElement = document.getElementById(container);
                        if (!containerElement) {
                            console.warn(`Container #${container} not found in the DOM`);
                            return;
                        }
                        const entries = containerElement.querySelectorAll(`.${container.slice(0, -1)}-entry`);
                        if (!entries.length) {
                            console.warn(`No entries found for #${container}`);
                            return;
                        }
                        entries.forEach((entry, index) => {
                            if (!entry) {
                                console.warn(`Entry is null for container #${container} at index ${index}`);
                                return;
                            }
                            const inputs = entry.querySelectorAll('input');
                            inputs.forEach(input => {
                                if (isPublish) {
                                    input.setAttribute('required', '');
                                    if (!input.value.trim()) {
                                        input.classList.add('is-invalid');
                                    }
                                } else {
                                    input.removeAttribute('required');
                                    input.classList.remove('is-invalid');
                                }
                            });
                            const deleteBtn = entry.querySelector(`.delete-${container.slice(0, -1)}`);
                            if (deleteBtn) {
                                deleteBtn.style.display = entries.length === 1 ? 'none' : 'inline-block';
                            }
                        });
                    });

                    // Handle itinerary days
                    const itineraryItems = document.querySelectorAll('.itinerary-item');
                    itineraryItems.forEach((item) => {
                        if (!item) {
                            console.warn('Itinerary item is null');
                            return;
                        }
                        const inputs = item.querySelectorAll('input, select');
                        inputs.forEach(input => {
                            if (isPublish) {
                                input.setAttribute('required', '');
                                const inputLabel = input.closest('.form-group')?.querySelector('label');
                                if (inputLabel) inputLabel.classList.add('required-field');
                                if (!input.value.trim()) {
                                    input.classList.add('is-invalid');
                                }
                            } else {
                                input.removeAttribute('required');
                                const inputLabel = input.closest('.form-group')?.querySelector('label');
                                if (inputLabel) inputLabel.classList.remove('required-field');
                                input.classList.remove('is-invalid');
                            }
                        });
                        const deleteBtn = item.querySelector('.delete-itinerary-row');
                        if (deleteBtn) {
                            deleteBtn.style.display = item.parentElement.querySelectorAll('.itinerary-item').length === 1 ? 'none' : 'inline-block';
                        }
                    });

                    // Handle program days
                    const programItems = document.querySelectorAll('.program-day-entry');
                    programItems.forEach((item) => {
                        if (!item) {
                            console.warn('Program item is null');
                            return;
                        }
                        const inputs = item.querySelectorAll('input, textarea');
                        inputs.forEach(input => {
                            if (isPublish) {
                                input.setAttribute('required', '');
                                const inputLabel = input.closest('.form-group')?.querySelector('label');
                                if (inputLabel) inputLabel.classList.add('required-field');
                                if (!input.value.trim()) {
                                    input.classList.add('is-invalid');
                                }
                            } else {
                                input.removeAttribute('required');
                                const inputLabel = input.closest('.form-group')?.querySelector('label');
                                if (inputLabel) inputLabel.classList.remove('required-field');
                                input.classList.remove('is-invalid');
                            }
                        });
                        const deleteBtn = item.querySelector('.delete-program-day');
                        if (deleteBtn) {
                            deleteBtn.style.display = item.parentElement.querySelectorAll('.program-day-entry').length === 1 ? 'none' : 'inline-block';
                        }
                    });

                    // Handle additional categories
                    const categoryInputs = document.querySelectorAll('#category-list input[type="checkbox"]');
                    const categoriesHeader = document.querySelector('.db-cat-field-wrap h4');
                    if (isPublish && categoryInputs.length > 0) {
                        let isChecked = Array.from(categoryInputs).some(input => input.checked);
                        categoryInputs.forEach(input => {
                            if (!isChecked) {
                                input.setAttribute('required', '');
                            } else {
                                input.removeAttribute('required');
                            }
                        });
                        if (categoriesHeader) {
                            categoriesHeader.classList.add('required-field');
                        }
                    } else {
                        categoryInputs.forEach(input => input.removeAttribute('required'));
                        if (categoriesHeader) {
                            categoriesHeader.classList.remove('required-field');
                        }
                    }
                };

                // Initialize Leaflet map
                const map = L.map('map').setView([0, 0], 2);
                L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                    attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
                }).addTo(map);
                const marker = L.marker([0, 0], { draggable: true }).addTo(map);

                // Map click handler
                map.on('click', (e) => {
                    const { lat, lng } = e.latlng;
                    marker.setLatLng([lat, lng]);
                    fetch(`https://api.opencagedata.com/geocode/v1/json?q=${lat}+${lng}&key=${OPENCAGE_API_KEY}`)
                        .then(response => response.json())
                        .then(data => {
                            if (data.results && data.results.length > 0) {
                                latitudeInput.value = lat;
                                longitudeInput.value = lng;
                                destinationAddressInput.value = data.results[0].formatted || '';
                                destinationCountryInput.value = data.results[0].components.country || '';
                            }
                        })
                        .catch(error => {
                            console.error('Reverse geocoding error:', error);
                            latitudeInput.value = lat;
                            longitudeInput.value = lng;
                            destinationAddressInput.value = '';
                            destinationCountryInput.value = '';
                        });
                });

                // Marker drag handler
                marker.on('dragend', (e) => {
                    const { lat, lng } = e.target.getLatLng();
                    fetch(`https://api.opencagedata.com/geocode/v1/json?q=${lat}+${lng}&key=${OPENCAGE_API_KEY}`)
                        .then(response => response.json())
                        .then(data => {
                            if (data.results && data.results.length > 0) {
                                latitudeInput.value = lat;
                                longitudeInput.value = lng;
                                destinationAddressInput.value = data.results[0].formatted || '';
                                destinationCountryInput.value = data.results[0].components.country || '';
                            }
                        })
                        .catch(error => {
                            console.error('Reverse geocoding error:', error);
                            latitudeInput.value = lat;
                            longitudeInput.value = lng;
                            destinationAddressInput.value = '';
                            destinationCountryInput.value = '';
                        });
                });

                // Location search handler
                locationSearch.addEventListener('input', (e) => {
                    const query = e.target.value;
                    if (query.length < 3) return;
                    fetch(`https://api.opencagedata.com/geocode/v1/json?q=${encodeURIComponent(query)}&key=${OPENCAGE_API_KEY}`)
                        .then(response => response.json())
                        .then(data => {
                            if (data.results && data.results.length > 0) {
                                const { lat, lng } = data.results[0].geometry;
                                const formattedAddress = data.results[0].formatted;
                                const country = data.results[0].components.country;
                                map.setView([lat, lng], 15);
                                marker.setLatLng([lat, lng]);
                                latitudeInput.value = lat;
                                longitudeInput.value = lng;
                                destinationAddressInput.value = formattedAddress || '';
                                destinationCountryInput.value = country || '';
                            }
                        })
                        .catch(error => console.error('Search error:', error));
                });

                // Itinerary management
                const itineraryItemTypes = ['sightseeing', 'activity', 'meal', 'transport', 'accommodation'];

                const updateItinerary = () => {
                    const days = parseInt(daysInput.value) || 0;
                    totalDaysSpan.textContent = days;
                    totalProgramDaysSpan.textContent = days;
                    itineraryDays.innerHTML = '';
                    for (let i = 0; i < days; i++) {
                        const dayDiv = document.createElement('div');
                        dayDiv.className = 'd-flex flex-column mb-3';
                        dayDiv.id = `itinerary-${i}`;
                        dayDiv.innerHTML = `
                            <input type="hidden" name="itineraryDays[${i}][day]" value="${i + 1}">
                            <div class="d-flex justify-content-between align-items-center bg-dark p-3 text-white">
                                <strong class="d-inline" style="font-size: 18px">Day ${i + 1}</strong>
                                <div class="d-flex align-items-center">
                                    <span class="btn btn-outline-light btn-sm rounded-0 px-3 itineraryAdd" id="itinerary-add-${i}">Add Activity</span>
                                </div>
                            </div>
                            <div id="itinerary-activities-${i}" class="mt-3 itinerary-activities">
                                <div class="w-100 mt-3 itinerary-item" id="itinerary-item-${i}-0">
                                    <div class="d-flex justify-content-between">
                                        <strong>#1</strong>
                                        <i id="delete-item-${i}-0" class="fas fa-trash text-danger delete-itinerary-row" style="font-size: 18px; cursor: pointer; display: none;"></i>
                                    </div>
                                    <div class="row mt-2">
                                        <div class="form-group col-md-5">
                                            <label>Title</label>
                                            <input name="itineraryDays[${i}][activities][0][title]" class="form-control itinerary-title" type="text" required>
                                        </div>
                                        <div class="form-group col-md-7">
                                            <label>Sub Title</label>
                                            <input name="itineraryDays[${i}][activities][0][sub_title]" class="form-control itinerary-sub-title" type="text" required>
                                        </div>
                                        <div class="form-group col-md-4">
                                            <label>Start Time</label>
                                            <input name="itineraryDays[${i}][activities][0][start_time]" class="form-control itinerary-start-time" type="time" required>
                                        </div>
                                        <div class="form-group col-md-4">
                                            <label>End Time</label>
                                            <input name="itineraryDays[${i}][activities][0][end_time]" class="form-control itinerary-end-time" type="time" required>
                                        </div>
                                        <div class="form-group col-md-4">
                                            <label>Type</label>
                                            <select name="itineraryDays[${i}][activities][0][type]" class="form-control itinerary-type" required>
                                                <option value="" disabled selected>Select itinerary item type</option>
                                                ${itineraryItemTypes.map(type => `<option value="${type}">${type.toUpperCase()}</option>`).join('')}
                                            </select>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        `;
                        itineraryDays.appendChild(dayDiv);
                        dayDiv.querySelector(`#itinerary-add-${i}`).addEventListener('click', (e) => {
                            e.preventDefault();
                            addActivity(i);
                        });
                        setupItineraryDeleteListener(i);
                    }
                    updateProgramDays();
                    toggleRequiredFields();
                };

                function addActivity(dayIndex) {
                    const activitiesContainer = document.getElementById(`itinerary-activities-${dayIndex}`);
                    if (!activitiesContainer) {
                        console.warn(`Activities container for day ${dayIndex} not found`);
                        return;
                    }
                    const activityCount = activitiesContainer.querySelectorAll('.itinerary-item').length;
                    const activityDiv = document.createElement('div');
                    activityDiv.className = 'w-100 mt-3 itinerary-item';
                    activityDiv.id = `itinerary-item-${dayIndex}-${activityCount}`;
                    activityDiv.innerHTML = `
                        <div class="d-flex justify-content-between">
                            <strong>#${activityCount + 1}</strong>
                            <i id="delete-item-${dayIndex}-${activityCount}" class="fas fa-trash text-danger delete-itinerary-row" style="font-size: 18px; cursor: pointer;"></i>
                        </div>
                        <div class="row mt-2">
                            <div class="form-group col-md-5">
                                <label>Title</label>
                                <input name="itineraryDays[${dayIndex}][activities][${activityCount}][title]" class="form-control itinerary-title" type="text" required>
                            </div>
                            <div class="form-group col-md-7">
                                <label>Sub Title</label>
                                <input name="itineraryDays[${dayIndex}][activities][${activityCount}][sub_title]" class="form-control itinerary-sub-title" type="text" required>
                            </div>
                            <div class="form-group col-md-4">
                                <label>Start Time</label>
                                <input name="itineraryDays[${dayIndex}][activities][${activityCount}][start_time]" class="form-control itinerary-start-time" type="time" required>
                            </div>
                            <div class="form-group col-md-4">
                                <label>End Time</label>
                                <input name="itineraryDays[${dayIndex}][activities][${activityCount}][end_time]" class="form-control itinerary-end-time" type="time" required>
                            </div>
                            <div class="form-group col-md-4">
                                <label>Type</label>
                                <select name="itineraryDays[${dayIndex}][activities][${activityCount}][type]" class="form-control itinerary-type" required>
                                    <option value="" disabled selected>Select itinerary item type</option>
                                    ${itineraryItemTypes.map(type => `<option value="${type}">${type.toUpperCase()}</option>`).join('')}
                                </select>
                            </div>
                        </div>
                    `;
                    activitiesContainer.appendChild(activityDiv);
                    updateActivityIndices(dayIndex);
                    toggleRequiredFields();
                }

                function setupItineraryDeleteListener(dayIndex) {
                    const activitiesContainer = document.getElementById(`itinerary-activities-${dayIndex}`);
                    if (!activitiesContainer) {
                        console.warn(`Activities container for day ${dayIndex} not found`);
                        return;
                    }
                    activitiesContainer.removeEventListener('click', handleItineraryDelete);
                    activitiesContainer.addEventListener('click', handleItineraryDelete);

                    function handleItineraryDelete(e) {
                        const btn = e.target.closest('.delete-itinerary-row');
                        if (btn && activitiesContainer.querySelectorAll('.itinerary-item').length > 1) {
                            e.preventDefault();
                            const activityDiv = btn.closest('.itinerary-item');
                            if (activityDiv) {
                                activityDiv.remove();
                                updateActivityIndices(dayIndex);
                                toggleRequiredFields();
                            }
                        }
                    }
                }

                function updateActivityIndices(dayIndex) {
                    const activitiesContainer = document.getElementById(`itinerary-activities-${dayIndex}`);
                    if (!activitiesContainer) {
                        console.warn(`Activities container for day ${dayIndex} not found`);
                        return;
                    }
                    const activities = activitiesContainer.querySelectorAll('.itinerary-item');
                    activities.forEach((activity, index) => {
                        activity.id = `itinerary-item-${dayIndex}-${index}`;
                        activity.querySelector('strong').textContent = `#${index + 1}`;
                        const inputs = activity.querySelectorAll('input, select');
                        inputs[0].name = `itineraryDays[${dayIndex}][activities][${index}][title]`;
                        inputs[1].name = `itineraryDays[${dayIndex}][activities][${index}][sub_title]`;
                        inputs[2].name = `itineraryDays[${dayIndex}][activities][${index}][start_time]`;
                        inputs[3].name = `itineraryDays[${dayIndex}][activities][${index}][end_time]`;
                        inputs[4].name = `itineraryDays[${dayIndex}][activities][${index}][type]`;
                        const deleteBtn = activity.querySelector('.delete-itinerary-row');
                        if (deleteBtn) {
                            deleteBtn.id = `delete-item-${dayIndex}-${index}`;
                            deleteBtn.style.display = activities.length === 1 ? 'none' : 'inline-block';
                        }
                    });
                }

                // Program management
                const updateProgramDays = () => {
                    const days = parseInt(daysInput.value) || 0;
                    totalProgramDaysSpan.textContent = days;
                    programDays.innerHTML = '';
                    for (let i = 0; i < days; i++) {
                        const dayDiv = document.createElement('div');
                        dayDiv.className = 'program-day-entry mb-3';
                        dayDiv.id = `program-day-${i}`;
                        dayDiv.innerHTML = `
                            <input type="hidden" name="programDays[${i}][day]" value="${i + 1}">
                            <div class="d-flex justify-content-between align-items-center bg-dark p-3 text-white">
                                <strong class="d-inline" style="font-size: 18px">Day ${i + 1}</strong>
                                <i id="delete-program-day-${i}" class="fas fa-trash text-danger delete-program-day" style="font-size: 18px; cursor: pointer; ${days === 1 ? 'display: none;' : ''}"></i>
                            </div>
                            <div class="mt-3">
                                <div class="form-group mb-3">
                                    <label for="programDayTitle${i}" class="form-label">Title</label>
                                    <input type="text" name="programDays[${i}][title]" id="programDayTitle${i}" class="form-control" placeholder="e.g., Ancient Rome Visit" required>
                                </div>
                                <div class="form-group mb-3">
                                    <label for="programDayDescription${i}" class="form-label">Description</label>
                                    <textarea name="programDays[${i}][description]" id="programDayDescription${i}" class="form-control" rows="4" placeholder="Enter day description" required></textarea>
                                </div>
                            </div>
                        `;
                        programDays.appendChild(dayDiv);
                        setupProgramDeleteListener(i);
                    }
                    toggleRequiredFields();
                };

                function setupProgramDeleteListener(dayIndex) {
                    const dayContainer = document.getElementById(`program-day-${dayIndex}`);
                    if (!dayContainer) {
                        console.warn(`Program day container for day ${dayIndex} not found`);
                        return;
                    }
                    const deleteBtn = dayContainer.querySelector('.delete-program-day');
                    if (deleteBtn) {
                        deleteBtn.addEventListener('click', (e) => {
                            e.preventDefault();
                            const programDaysContainer = document.getElementById('programDays');
                            if (programDaysContainer.querySelectorAll('.program-day-entry').length > 1) {
                                dayContainer.remove();
                                updateProgramDayIndices();
                                toggleRequiredFields();
                            }
                        });
                    }
                }

                function updateProgramDayIndices() {
                    const programDayEntries = programDays.querySelectorAll('.program-day-entry');
                    programDayEntries.forEach((entry, index) => {
                        entry.id = `program-day-${index}`;
                        entry.querySelector('input[type="hidden"]').name = `programDays[${index}][day]`;
                        entry.querySelector('input[type="text"]').name = `programDays[${index}][title]`;
                        entry.querySelector('input[type="text"]').id = `programDayTitle${index}`;
                        entry.querySelector('textarea').name = `programDays[${index}][description]`;
                        entry.querySelector('textarea').id = `programDayDescription${index}`;
                        entry.querySelector('strong').textContent = `Day ${index + 1}`;
                        const deleteBtn = entry.querySelector('.delete-program-day');
                        if (deleteBtn) {
                            deleteBtn.id = `delete-program-day-${index}`;
                            deleteBtn.style.display = programDayEntries.length === 1 ? 'none' : 'inline-block';
                        }
                    });
                }

                addProgramDayLink.addEventListener('click', (e) => {
                    e.preventDefault();
                    const programDayCount = programDays.querySelectorAll('.program-day-entry').length;
                    const dayDiv = document.createElement('div');
                    dayDiv.className = 'program-day-entry mb-3';
                    dayDiv.id = `program-day-${programDayCount}`;
                    dayDiv.innerHTML = `
                        <input type="hidden" name="programDays[${programDayCount}][day]" value="${programDayCount + 1}">
                        <div class="d-flex justify-content-between align-items-center bg-dark p-3 text-white">
                            <strong class="d-inline" style="font-size: 18px">Day ${programDayCount + 1}</strong>
                            <i id="delete-program-day-${programDayCount}" class="fas fa-trash text-danger delete-program-day" style="font-size: 18px; cursor: pointer;"></i>
                        </div>
                        <div class="mt-3">
                            <div class="form-group mb-3">
                                <label for="programDayTitle${programDayCount}" class="form-label">Title</label>
                                <input type="text" name="programDays[${programDayCount}][title]" id="programDayTitle${programDayCount}" class="form-control" placeholder="e.g., Ancient Rome Visit" required>
                            </div>
                            <div class="form-group mb-3">
                                <label for="programDayDescription${programDayCount}" class="form-label">Description</label>
                                <textarea name="programDays[${programDayCount}][description]" id="programDayDescription${programDayCount}" class="form-control" rows="4" placeholder="Enter day description" required></textarea>
                            </div>
                        </div>
                    `;
                    programDays.appendChild(dayDiv);
                    setupProgramDeleteListener(programDayCount);
                    updateProgramDayIndices();
                    toggleRequiredFields();
                });

                programDays.addEventListener('click', (e) => {
                    const btn = e.target.closest('.delete-program-day');
                    if (btn && programDays.querySelectorAll('.program-day-entry').length > 1) {
                        e.preventDefault();
                        btn.closest('.program-day-entry').remove();
                        updateProgramDayIndices();
                        toggleRequiredFields();
                    }
                });

                daysInput.addEventListener('input', updateItinerary);
                nightsInput.addEventListener('input', updateItinerary);

                // Departures management
                let departureCount = 1;
                addDepartureLink.addEventListener('click', (e) => {
                    e.preventDefault();
                    const departureDiv = document.createElement('div');
                    departureDiv.className = 'departure-entry mb-3 d-flex align-items-center';
                    departureDiv.innerHTML = `
                        <div class="flex-grow-1 me-2">
                            <div class="form-group">
                                <label for="departureLocation${departureCount}" class="form-label required-field">Departure Location</label>
                                <input type="text" name="multipleDepartures[${departureCount}][location]" id="departureLocation${departureCount}" class="form-control" required>
                            </div>
                        </div>
                        <div class="me-2">
                            <div class="form-group">
                                <label for="departureDateTime${departureCount}" class="form-label required-field">Departure Date and Time</label>
                                <input type="datetime-local" name="multipleDepartures[${departureCount}][dateTime]" id="departureDateTime${departureCount}" class="form-control" required>
                            </div>
                        </div>
                        <div>
                            <i class="fas fa-trash text-danger delete-departure" style="font-size: 18px; cursor: pointer;"></i>
                        </div>
                    `;
                    departuresContainer.appendChild(departureDiv);
                    departureCount++;
                    updateDepartureIndices();
                    toggleRequiredFields();
                });

                departuresContainer.addEventListener('click', (e) => {
                    const btn = e.target.closest('.delete-departure');
                    if (btn && departuresContainer.querySelectorAll('.departure-entry').length > 1) {
                        e.preventDefault();
                        btn.closest('.departure-entry').remove();
                        departureCount--;
                        updateDepartureIndices();
                        toggleRequiredFields();
                    }
                });

                function updateDepartureIndices() {
                    const departures = departuresContainer.querySelectorAll('.departure-entry');
                    departures.forEach((dep, index) => {
                        const locationInput = dep.querySelector('input[type="text"]');
                        const dateTimeInput = dep.querySelector('input[type="datetime-local"]');
                        const locationLabel = dep.querySelector('label[for^="departureLocation"]');
                        const dateTimeLabel = dep.querySelector('label[for^="departureDateTime"]');
                        if (locationInput && dateTimeInput && locationLabel && dateTimeLabel) {
                            locationInput.name = `multipleDepartures[${index}][location]`;
                            dateTimeInput.name = `multipleDepartures[${index}][dateTime]`;
                            locationInput.id = `departureLocation${index}`;
                            dateTimeInput.id = `departureDateTime${index}`;
                            locationLabel.setAttribute('for', `departureLocation${index}`);
                            dateTimeLabel.setAttribute('for', `departureDateTime${index}`);
                            const deleteBtn = dep.querySelector('.delete-departure');
                            if (deleteBtn) {
                                deleteBtn.style.display = departures.length === 1 ? 'none' : 'inline-block';
                            }
                        }
                    });
                }

                // Inclusions management
                let inclusionCount = 1;
                addInclusionLink.addEventListener('click', (e) => {
                    e.preventDefault();
                    const inclusionDiv = document.createElement('div');
                    inclusionDiv.className = 'inclusion-entry mb-3 d-flex align-items-center';
                    inclusionDiv.innerHTML = `
                        <div class="flex-grow-1 me-2">
                            <input type="text" name="inclusions[${inclusionCount}]" class="form-control" placeholder="e.g., Meals">
                        </div>
                        <div>
                            <i class="fas fa-trash text-danger delete-inclusion" style="font-size: 18px; cursor: pointer;"></i>
                        </div>
                    `;
                    inclusionsContainer.appendChild(inclusionDiv);
                    inclusionCount++;
                    updateInclusionIndices();
                    toggleRequiredFields();
                });

                inclusionsContainer.addEventListener('click', (e) => {
                    const btn = e.target.closest('.delete-inclusion');
                    if (btn && inclusionsContainer.querySelectorAll('.inclusion-entry').length > 1) {
                        e.preventDefault();
                        btn.closest('.inclusion-entry').remove();
                        inclusionCount--;
                        updateInclusionIndices();
                        toggleRequiredFields();
                    }
                });

                function updateInclusionIndices() {
                    const inclusions = inclusionsContainer.querySelectorAll('.inclusion-entry');
                    inclusions.forEach((inc, index) => {
                        const input = inc.querySelector('input');
                        if (input) {
                            input.name = `inclusions[${index}]`;
                            const deleteBtn = inc.querySelector('.delete-inclusion');
                            if (deleteBtn) {
                                deleteBtn.style.display = inclusions.length === 1 ? 'none' : 'inline-block';
                            }
                            if (statusSelect.value === 'Active') {
                                input.setAttribute('required', '');
                                if (!input.value.trim()) {
                                    input.classList.add('is-invalid');
                                }
                            } else {
                                input.removeAttribute('required');
                                input.classList.remove('is-invalid');
                            }
                        }
                    });
                }

                // Exclusions management
                let exclusionCount = 1;
                addExclusionLink.addEventListener('click', (e) => {
                    e.preventDefault();
                    const exclusionDiv = document.createElement('div');
                    exclusionDiv.className = 'exclusion-entry mb-3 d-flex align-items-center';
                    exclusionDiv.innerHTML = `
                        <div class="flex-grow-1 me-2">
                            <input type="text" name="exclusions[${exclusionCount}]" class="form-control" placeholder="e.g., Airfare">
                        </div>
                        <div>
                            <i class="fas fa-trash text-danger delete-exclusion" style="font-size: 18px; cursor: pointer;"></i>
                        </div>
                    `;
                    exclusionsContainer.appendChild(exclusionDiv);
                    exclusionCount++;
                    updateExclusionIndices();
                    toggleRequiredFields();
                });

                exclusionsContainer.addEventListener('click', (e) => {
                    const btn = e.target.closest('.delete-exclusion');
                    if (btn && exclusionsContainer.querySelectorAll('.exclusion-entry').length > 1) {
                        e.preventDefault();
                        btn.closest('.exclusion-entry').remove();
                        exclusionCount--;
                        updateExclusionIndices();
                        toggleRequiredFields();
                    }
                });

                function updateExclusionIndices() {
                    const exclusions = exclusionsContainer.querySelectorAll('.exclusion-entry');
                    exclusions.forEach((exc, index) => {
                        const input = exc.querySelector('input');
                        if (input) {
                            input.name = `exclusions[${index}]`;
                            const deleteBtn = exc.querySelector('.delete-exclusion');
                            if (deleteBtn) {
                                deleteBtn.style.display = exclusions.length === 1 ? 'none' : 'inline-block';
                            }
                            if (statusSelect.value === 'Active') {
                                input.setAttribute('required', '');
                                if (!input.value.trim()) {
                                    input.classList.add('is-invalid');
                                }
                            } else {
                                input.removeAttribute('required');
                                input.classList.remove('is-invalid');
                            }
                        }
                    });
                }

                // Activity Types management
                let activityTypeCount = 1;
                addActivityTypeLink.addEventListener('click', (e) => {
                    e.preventDefault();
                    const activityTypeDiv = document.createElement('div');
                    activityTypeDiv.className = 'activityType-entry mb-3 d-flex align-items-center';
                    activityTypeDiv.innerHTML = `
                        <div class="flex-grow-1 me-2">
                            <input type="text" name="activityTypes[${activityTypeCount}]" class="form-control" placeholder="e.g., Hiking">
                        </div>
                        <div>
                            <i class="fas fa-trash text-danger delete-activityType" style="font-size: 18px; cursor: pointer;"></i>
                        </div>
                    `;
                    activityTypesContainer.appendChild(activityTypeDiv);
                    activityTypeCount++;
                    updateActivityTypeIndices();
                    toggleRequiredFields();
                });

                activityTypesContainer.addEventListener('click', (e) => {
                    const btn = e.target.closest('.delete-activityType');
                    if (btn && activityTypesContainer.querySelectorAll('.activityType-entry').length > 1) {
                        e.preventDefault();
                        btn.closest('.activityType-entry').remove();
                        activityTypeCount--;
                        updateActivityTypeIndices();
                        toggleRequiredFields();
                    }
                });

                function updateActivityTypeIndices() {
                    const activityTypes = activityTypesContainer.querySelectorAll('.activityType-entry');
                    activityTypes.forEach((act, index) => {
                        const input = act.querySelector('input');
                        if (input) {
                            input.name = `activityTypes[${index}]`;
                            const deleteBtn = act.querySelector('.delete-activityType');
                            if (deleteBtn) {
                                deleteBtn.style.display = activityTypes.length === 1 ? 'none' : 'inline-block';
                            }
                            if (statusSelect.value === 'Active') {
                                input.setAttribute('required', '');
                                if (!input.value.trim()) {
                                    input.classList.add('is-invalid');
                                }
                            } else {
                                input.removeAttribute('required');
                                input.classList.remove('is-invalid');
                            }
                        }
                    });
                }

                // Highlights management
                let highlightCount = 1;
                addHighlightLink.addEventListener('click', (e) => {
                    e.preventDefault();
                    const highlightDiv = document.createElement('div');
                    highlightDiv.className = 'highlight-entry mb-3 d-flex align-items-center';
                    highlightDiv.innerHTML = `
                        <div class="flex-grow-1 me-2">
                            <input type="text" name="highlights[${highlightCount}]" class="form-control" placeholder="e.g., Scenic views">
                        </div>
                        <div>
                            <i class="fas fa-trash text-danger delete-highlight" style="font-size: 18px; cursor: pointer;"></i>
                        </div>
                    `;
                    highlightsContainer.appendChild(highlightDiv);
                    highlightCount++;
                    updateHighlightIndices();
                    toggleRequiredFields();
                });

                highlightsContainer.addEventListener('click', (e) => {
                    const btn = e.target.closest('.delete-highlight');
                    if (btn && highlightsContainer.querySelectorAll('.highlight-entry').length > 1) {
                        e.preventDefault();
                        btn.closest('.highlight-entry').remove();
                        highlightCount--;
                        updateHighlightIndices();
                        toggleRequiredFields();
                    }
                });

                function updateHighlightIndices() {
                    const highlights = highlightsContainer.querySelectorAll('.highlight-entry');
                    highlights.forEach((hig, index) => {
                        const input = hig.querySelector('input');
                        if (input) {
                            input.name = `highlights[${index}]`;
                            const deleteBtn = hig.querySelector('.delete-highlight');
                            if (deleteBtn) {
                                deleteBtn.style.display = highlights.length === 1 ? 'none' : 'inline-block';
                            }
                            if (statusSelect.value === 'Active') {
                                input.setAttribute('required', '');
                                if (!input.value.trim()) {
                                    input.classList.add('is-invalid');
                                }
                            } else {
                                input.removeAttribute('required');
                                input.classList.remove('is-invalid');
                            }
                        }
                    });
                }

                // Add new category
                addCategoryBtn.addEventListener('click', (e) => {
                    e.preventDefault();
                    newCategoryInput.classList.toggle('d-none');
                });

                addCategorySubmit.addEventListener('click', () => {
                    const newCategory = newCategoryField.value.trim();
                    if (newCategory) {
                        const categoryDiv = document.createElement('div');
                        categoryDiv.className = 'form-group mb-2';
                        categoryDiv.innerHTML = `
                            <label class="custom-input">
                                <input type="checkbox" name="additionalCategories[]" value="${newCategory}" checked>
                                <span class="custom-input-field"></span>
                                ${newCategory}
                            </label>
                        `;
                        categoryList.appendChild(categoryDiv);
                        if (statusSelect.value === 'Active') {
                            const categoriesHeader = document.querySelector('.db-cat-field-wrap h4');
                            if (categoriesHeader) {
                                categoriesHeader.classList.add('required-field');
                            }
                            const newInput = categoryDiv.querySelector('input');
                            if (!Array.from(document.querySelectorAll('#category-list input[type="checkbox"]')).some(input => input.checked && input !== newInput)) {
                                newInput.setAttribute('required', '');
                            }
                        }
                        newCategoryField.value = '';
                        newCategoryInput.classList.add('d-none');
                        toggleRequiredFields();
                    }
                });

                // Gallery image preview
                galleryInput.addEventListener('change', () => {
                    galleryPreview.innerHTML = '';
                    if (galleryInput.files.length > 8) {
                        galleryError.classList.remove('d-none');
                        galleryInput.value = '';
                    } else {
                        galleryError.classList.add('d-none');
                        Array.from(galleryInput.files).forEach((file, index) => {
                            const reader = new FileReader();
                            reader.onload = (e) => {
                                const col = document.createElement('div');
                                col.className = 'col-auto';
                                col.innerHTML = `
                                    <img src="${e.target.result}" class="gallery-img" alt="Preview">
                                    <i class="fas fa-trash text-danger delete-gallery mt-1" style="font-size: 18px; cursor: pointer;"></i>
                                `;
                                galleryPreview.appendChild(col);
                                col.querySelector('.delete-gallery').addEventListener('click', (e) => {
                                    e.preventDefault();
                                    col.remove();
                                    const dt = new DataTransfer();
                                    Array.from(galleryInput.files).forEach((f, i) => {
                                        if (i !== index) dt.items.add(f);
                                    });
                                    galleryInput.files = dt.files;
                                    toggleRequiredFields();
                                });
                            };
                            reader.readAsDataURL(file);
                        });
                    }
                });

                // Featured image file name
                featuredInput.addEventListener('change', () => {
                    featuredFileName.textContent = featuredInput.files[0]?.name || 'No file selected';
                });

                // Status change handler
                statusSelect.addEventListener('change', toggleRequiredFields);

                // Keywords input handler to update is-invalid class
                keywordsInput.addEventListener('input', () => {
                    if (statusSelect.value === 'Active') {
                        if (keywordsInput.value.trim()) {
                            keywordsInput.classList.remove('is-invalid');
                        } else {
                            keywordsInput.classList.add('is-invalid');
                        }
                    }
                });

                // Ensure at least one category is checked when status is Active
                categoryList.addEventListener('change', (e) => {
                    if (statusSelect.value === 'Active') {
                        toggleRequiredFields();
                    }
                });

                // Form validation and submission
                form.addEventListener('submit', async (e) => {
                    e.preventDefault();
                    toggleRequiredFields();
                    if (!form.checkValidity()) {
                        e.stopPropagation();
                        form.classList.add('was-validated');
                        if (statusSelect.value === 'Active' && !keywordsInput.value.trim()) {
                            keywordsInput.classList.add('is-invalid');
                        }
                        return;
                    }
                    const formData = new FormData(form);
                    try {
                        const response = await fetch('/add-package', {
                            method: 'POST',
                            body: formData,
                        });
                        const result = await response.json();
                        if (response.ok) {
                            window.location.href = '/db-all-packages';
                        } else {
                            formError.classList.remove('d-none');
                            formError.textContent = result.error || 'Failed to submit form';
                        }
                    } catch (error) {
                        formError.classList.remove('d-none');
                        formError.textContent = 'Submission error: ' + error.message;
                    }
                });

                form.classList.add('needs-validation');
                form.setAttribute('novalidate', '');
                toggleRequiredFields();
                updateDepartureIndices();
                updateInclusionIndices();
                updateExclusionIndices();
                updateActivityTypeIndices();
                updateHighlightIndices();
            });
        </script>
    </body>
</html>