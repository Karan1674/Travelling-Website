<!DOCTYPE html>
<html lang="en">
<%- include('../partials/Header') %>
<body>
    <div id="container-wrapper">
        <div id="dashboard" class="dashboard-container">
            <%- include('../partials/Navbar') %>
            <%- include('../partials/Sidebar') %>
            <div class="db-info-wrap db-add-tour-wrap p-4">
                <form id="edit-package-form" action="/edit-package/<%= packageData._id %>" method="post" enctype="multipart/form-data">
                    <div class="row">
                        <div class="col-lg-8 col-xl-9">
                            <!-- Basic Information -->
                            <div class="dashboard-box mb-4 border rounded p-4 bg-white">
                                <div class="custom-field-wrap">
                                    <h4 class="mb-3">Basic Information</h4>
                                    <div class="form-group mb-3">
                                        <label for="title" class="form-label required-field">Title</label>
                                        <input type="text" name="title" id="title" class="form-control" value="<%= packageData.title %>" required>
                                    </div>
                                    <div class="form-group mb-3">
                                        <label for="packageType" class="form-label required-field">Package Type</label>
                                        <select name="packageType" id="packageType" class="form-control" required>
                                            <% ['Adventure', 'Cultural', 'Luxury', 'Family', 'Wellness', 'Eco'].forEach(type => { %>
                                                <option value="<%= type %>" <%= packageData.packageType === type ? 'selected' : '' %>><%= type %></option>
                                            <% }) %>
                                        </select>
                                    </div>
                                    <div class="form-group mb-3">
                                        <label for="description" class="form-label required-field">Description</label>
                                        <textarea name="description" id="description" class="form-control" rows="5" required><%= packageData.description %></textarea>
                                    </div>
                                </div>
                            </div>

                            <!-- Dates and Prices -->
                            <div class="dashboard-box mb-4 border rounded p-4 bg-white">
                                <div class="custom-field-wrap">
                                    <h4 class="mb-3">Dates and Prices</h4>
                                    <div class="row">
                                        <div class="col-sm-6 mb-3">
                                            <div class="form-group">
                                                <label for="groupSize" class="form-label">Group Size</label>
                                                <input type="number" name="groupSize" id="groupSize" class="form-control" value="<%= packageData.groupSize || '' %>" placeholder="No of Pax">
                                            </div>
                                        </div>
                                        <div class="col-sm-6 mb-3">
                                            <div class="row">
                                                <div class="col-6">
                                                    <div class="form-group">
                                                        <label for="days" class="form-label">Trip Duration(Days)</label>
                                                        <input type="number" name="days" id="days" class="form-control" value="<%= packageData.tripDuration?.days || '' %>" placeholder="Days">
                                                    </div>
                                                </div>
                                                <div class="col-6">
                                                    <div class="form-group">
                                                        
                                                        <label for="nights" class="form-label">Trip Duration(Nights)</label>
                                                        <input type="number" name="nights" id="nights" class="form-control" value="<%= packageData.tripDuration?.nights || '' %>" placeholder="Nights">
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-sm-4 mb-3">
                                            <div class="form-group">
                                                <label for="category" class="form-label">Category</label>
                                                <select name="category" id="category" class="form-control">
                                                    <% ['Adult', 'Child', 'Couple'].forEach(cat => { %>
                                                        <option value="<%= cat %>" <%= packageData.category === cat ? 'selected' : '' %>><%= cat %></option>
                                                    <% }) %>
                                                </select>
                                            </div>
                                        </div>
                                        <div class="col-sm-3 mb-3">
                                            <div class="form-group">
                                                <label for="regularPrice" class="form-label">Regular Price</label>
                                                <input type="text" name="regularPrice" id="regularPrice" class="form-control" value="<%= packageData.regularPrice || '' %>">
                                            </div>
                                        </div>
                                        <div class="col-sm-3 mb-3">
                                            <div class="form-group">
                                                <label for="salePrice" class="form-label">Sale Price</label>
                                                <input type="text" name="salePrice" id="salePrice" class="form-control" value="<%= packageData.salePrice || '' %>">
                                            </div>
                                        </div>
                                        <div class="col-sm-2 mb-3">
                                            <div class="form-group">
                                                <label for="discount" class="form-label">Discount</label>
                                                <input type="text" name="discount" id="discount" class="form-control" value="<%= packageData.discount || '' %>">
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Departures -->
                            <div class="dashboard-box mb-4 border rounded p-4 bg-white">
                                <div class="custom-field-wrap">
                                    <div class="d-flex justify-content-between align-items-center mb-3">
                                        <h4 class="mb-0">Departures</h4>
                                        <a href="#" id="add-departure" class="add-link border border-success rounded px-2 py-1"><i class="fas fa-plus"></i> Add</a>
                                    </div>
                                    <div id="departures">
                                        <% packageData.multipleDepartures?.forEach((dep, index) => { %>
                                            <div class="departure-entry mb-3 d-flex align-items-center">
                                                <div class="flex-grow-1 me-2">
                                                    <div class="form-group">
                                                        <label for="departureLocation<%= index %>" class="form-label required-field">Departure Location</label>
                                                        <input type="text" name="multipleDepartures[<%= index %>][location]" required id="departureLocation<%= index %>" class="form-control" value="<%= dep.location %>">
                                                    </div>
                                                </div>
                                                <div class="me-2">
                                                    <div class="form-group">
                                                        <label for="departureDateTime<%= index %>" class="form-label required-field">Departure Date and Time</label>
                                                        <input type="datetime-local" name="multipleDepartures[<%= index %>][dateTime]" required id="departureDateTime<%= index %>" class="form-control" value="<%= dep.dateTime ? new Date(dep.dateTime).toISOString().slice(0, 16) : '' %>">
                                                    </div>
                                                </div>
                                                <div>
                                                    <a href="#" class="remove-btn <%= packageData.multipleDepartures.length === 1 ? 'd-none' : '' %>"><i class="fas fa-minus"></i></a>
                                                </div>
                                            </div>
                                        <% }) %>
                                    </div>
                                </div>
                            </div>

                            <!-- Itinerary -->
                            <div class="dashboard-box mb-4 border rounded p-4 bg-white">
                                <div class="custom-field-wrap">
                                    <div class="d-flex justify-content-between align-items-center mb-3">
                                        <h4 class="mb-0">Program (<span id="total-days"><%= packageData.tripDuration?.days || 0 %> days)</span></h4>
                                        <a href="#" id="add-day" class="add-link border border-success rounded px-2 py-1"><i class="fas fa-plus"></i> Add</a>
                                    </div>
                                    <div class="form-group mb-3">
                                        <label for="itineraryDescription" class="form-label">Itinerary Description</label>
                                        <textarea name="itineraryDescription" id="itineraryDescription" class="form-control" rows="4"><%= packageData.itineraryDescription || '' %></textarea>
                                    </div>
                                    <div id="itinerary-days">
                                        <% packageData.itineraryDays?.forEach((day, index) => { %>
                                            <div class="form-group itinerary-content mb-3">
                                                <h5>Day <%= index + 1 %></h5>
                                                <div class="d-flex align-items-center mb-2">
                                                    <div class="flex-grow-1 me-2">
                                                        <label for="dayTitle<%= index + 1 %>" class="form-label">Title</label>
                                                        <input type="text" name="itineraryDays[<%= index %>][title]" id="dayTitle<%= index + 1 %>" class="form-control" value="<%= day.title %>">
                                                    </div>
                                                    <div>
                                                        <a href="#" class="remove-btn <%= packageData.itineraryDays.length === 1 ? 'd-none' : '' %>"><i class="fas fa-minus"></i></a>
                                                    </div>
                                                </div>
                                                <label for="dayDescription<%= index + 1 %>" class="form-label">Description</label>
                                                <textarea name="itineraryDays[<%= index %>][description]" id="dayDescription<%= index + 1 %>" class="form-control mb-2" rows="3"><%= day.description %></textarea>
                                            </div>
                                        <% }) %>
                                    </div>
                                </div>
                            </div>

                            <!-- Inclusions -->
                            <div class="dashboard-box mb-4 border rounded p-4 bg-white">
                                <div class="custom-field-wrap">
                                    <div class="d-flex justify-content-between align-items-center mb-3">
                                        <h4 class="mb-0">Inclusions</h4>
                                        <a href="#" id="add-inclusion" class="add-link border border-success rounded px-2 py-1"><i class="fas fa-plus"></i> Add</a>
                                    </div>
                                    <div id="inclusions">
                                        <% packageData.inclusions?.forEach((inc, index) => { %>
                                            <div class="inclusion-entry mb-3 d-flex align-items-center">
                                                <div class="flex-grow-1 me-2">
                                                    <input type="text" name="inclusions[<%= index %>]" class="form-control" value="<%= inc %>" placeholder="e.g., Meals">
                                                </div>
                                                <div>
                                                    <a href="#" class="remove-btn <%= packageData.inclusions.length === 1 ? 'd-none' : '' %>"><i class="fas fa-minus"></i></a>
                                                </div>
                                            </div>
                                        <% }) %>
                                    </div>
                                </div>
                            </div>

                            <!-- Exclusions -->
                            <div class="dashboard-box mb-4 border rounded p-4 bg-white">
                                <div class="custom-field-wrap">
                                    <div class="d-flex justify-content-between align-items-center mb-3">
                                        <h4 class="mb-0">Exclusions</h4>
                                        <a href="#" id="add-exclusion" class="add-link border border-success rounded px-2 py-1"><i class="fas fa-plus"></i> Add</a>
                                    </div>
                                    <div id="exclusions">
                                        <% packageData.exclusions?.forEach((exc, index) => { %>
                                            <div class="exclusion-entry mb-3 d-flex align-items-center">
                                                <div class="flex-grow-1 me-2">
                                                    <input type="text" name="exclusions[<%= index %>]" class="form-control" value="<%= exc %>" placeholder="e.g., Airfare">
                                                </div>
                                                <div>
                                                    <a href="#" class="remove-btn <%= packageData.exclusions.length === 1 ? 'd-none' : '' %>"><i class="fas fa-minus"></i></a>
                                                </div>
                                            </div>
                                        <% }) %>
                                    </div>
                                </div>
                            </div>

                            <!-- Activity Types -->
                            <div class="dashboard-box mb-4 border rounded p-4 bg-white">
                                <div class="custom-field-wrap">
                                    <div class="d-flex justify-content-between align-items-center mb-3">
                                        <h4 class="mb-0">Activity Types</h4>
                                        <a href="#" id="add-activityType" class="add-link border border-success rounded px-2 py-1"><i class="fas fa-plus"></i> Add</a>
                                    </div>
                                    <div id="activityTypes">
                                        <% packageData.activityTypes?.forEach((act, index) => { %>
                                            <div class="activityType-entry mb-3 d-flex align-items-center">
                                                <div class="flex-grow-1 me-2">
                                                    <input type="text" name="activityTypes[<%= index %>]" class="form-control" value="<%= act %>" placeholder="e.g., Hiking">
                                                </div>
                                                <div>
                                                    <a href="#" class="remove-btn <%= packageData.activityTypes.length === 1 ? 'd-none' : '' %>"><i class="fas fa-minus"></i></a>
                                                </div>
                                            </div>
                                        <% }) %>
                                    </div>
                                </div>
                            </div>

                            <!-- Highlights -->
                            <div class="dashboard-box mb-4 border rounded p-4 bg-white">
                                <div class="custom-field-wrap">
                                    <div class="d-flex justify-content-between align-items-center mb-3">
                                        <h4 class="mb-0">Highlights</h4>
                                        <a href="#" id="add-highlight" class="add-link border border-success rounded px-2 py-1"><i class="fas fa-plus"></i> Add</a>
                                    </div>
                                    <div id="highlights">
                                        <% packageData.highlights?.forEach((hig, index) => { %>
                                            <div class="highlight-entry mb-3 d-flex align-items-center">
                                                <div class="flex-grow-1 me-2">
                                                    <input type="text" name="highlights[<%= index %>]" class="form-control" value="<%= hig %>" placeholder="e.g., Scenic views">
                                                </div>
                                                <div>
                                                    <a href="#" class="remove-btn <%= packageData.highlights.length === 1 ? 'd-none' : '' %>"><i class="fas fa-minus"></i></a>
                                                </div>
                                            </div>
                                        <% }) %>
                                    </div>
                                </div>
                            </div>

                            <!-- Gallery -->
                            <div class="dashboard-box mb-4 border rounded p-4 bg-white">
                                <h4 class="mb-3">Gallery (Max 8 Images)</h4>
                                <div class="custom-field-wrap">
                                    <div class="dragable-field border border-dashed p-4 text-center">
                                        <div class="dragable-field-inner">
                                            <p class="drag-drop-info">Drop Files To Upload (Max 8)</p>
                                            <p>or</p>
                                            <div class="upload-input">
                                                <div class="form-group">
                                                    <label for="gallery-input" class="upload-btn btn btn-success">Upload Images</label>
                                                    <input type="file" id="gallery-input" name="gallery" multiple accept="image/*" class="d-none">
                                                </div>
                                            </div>
                                            <div id="gallery-preview" class="mt-3 row">
                                                <% packageData.gallery?.forEach((img, index) => { %>
                                                    <div class="col-auto gallery-img-container">
                                                        <img src="/Uploads/gallery/<%= img %>" class="gallery-img" alt="Gallery Image">
                                                        <input type="hidden" name="existingImages[<%= index %>]" value="<%= img %>">
                                                        <a href="#" class="remove-btn mt-1"><i class="fas fa-minus"></i></a>
                                                    </div>
                                                <% }) %>
                                            </div>
                                            <p id="gallery-error" class="text-danger d-none mt-2">Maximum 8 images allowed.</p>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Location -->
                            <div class="dashboard-box mb-4 border rounded p-4 bg-white">
                                <h4 class="mb-3">Location</h4>
                                <div class="custom-field-wrap">
                                    <div class="form-group mb-3">
                                        <label for="location-search" class="form-label">Search Location</label>
                                        <input type="text" id="location-search" class="form-control" value="<%= packageData.address || '' %>" placeholder="Search for a place">
                                    </div>
                                    <input type="hidden" name="latitude" id="latitude" value="<%= packageData.latitude || '' %>">
                                    <input type="hidden" name="longitude" id="longitude" value="<%= packageData.longitude || '' %>">
                                    <input type="hidden" name="address" id="address" value="<%= packageData.address || '' %>">
                                    <div id="map" style="height: 400px; width: 100%; margin-top: 20px;" class="border rounded"></div>
                                </div>
                            </div>
                        </div>

                        <!-- Sidebar -->
                        <div class="col-lg-4 col-xl-3">
                            <!-- Additional Categories -->
                            <div class="dashboard-box mb-4 border rounded p-4 bg-white">
                                <div class="custom-field-wrap db-cat-field-wrap">
                                    <h4 class="mb-3">Additional Categories</h4>
                                    <div id="category-list">
                                        <% ['Hotel', 'Walking'].forEach(cat => { %>
                                            <div class="form-group mb-2">
                                                <label class="custom-input">
                                                    <input type="checkbox" name="additionalCategories[]" value="<%= cat %>" <%= packageData.additionalCategories?.includes(cat) ? 'checked' : '' %>>
                                                    <span class="custom-input-field"></span>
                                                    <%= cat %>
                                                </label>
                                            </div>
                                        <% }) %>
                                        <% packageData.additionalCategories?.filter(cat => !['Hotel', 'Walking'].includes(cat)).forEach(cat => { %>
                                            <div class="form-group mb-2">
                                                <label class="custom-input">
                                                    <input type="checkbox" name="additionalCategories[]" value="<%= cat %>" checked>
                                                    <span class="custom-input-field"></span>
                                                    <%= cat %>
                                                </label>
                                            </div>
                                        <% }) %>
                                    </div>
                                    <a href="#" id="add-category-btn" class="add-link border border-success rounded px-2 py-1 mt-2 d-inline-block"><i class="fas fa-plus"></i> Add Categories</a>
                                    <div id="new-category-input" class="d-none mt-2">
                                        <div class="form-group">
                                            <input type="text" id="new-category" class="form-control" placeholder="New category">
                                            <button type="button" id="add-category-submit" class="btn btn-primary mt-2">Add</button>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <!-- Keywords -->
                            <div class="dashboard-box mb-4 border rounded p-4 bg-white">
                                <div class="custom-field-wrap db-pop-field-wrap">
                                    <h4 class="mb-3">Keywords</h4>
                                    <div class="form-group">
                                        <input type="text" name="keywords" id="keywords" class="form-control" value="<%= packageData.keywords || '' %>" placeholder="Comma-separated keywords">
                                    </div>
                                </div>
                            </div>

                            <!-- Featured Image -->
                            <div class="dashboard-box mb-4 border rounded p-4 bg-white">
                                <div class="custom-field-wrap db-media-field-wrap">
                                    <h4 class="mb-3">Featured Image</h4>
                                    <div class="upload-input">
                                        <div class="form-group">
                                            <label for="featured-input" class="upload-btn btn btn-success">Upload a Featured Image</label>
                                            <input type="file" id="featured-input" name="featuredImage" accept="image/*" class="d-none">
                                        </div>
                                    </div>
                                    <div id="featured-file-name" class="mt-2 text-dark">
                                        <%= packageData.featuredImage ? packageData.featuredImage : 'No file selected' %>
                                    </div>
                                    <% if (packageData.featuredImage) { %>
                                        <img src="/Uploads/gallery/<%= packageData.featuredImage %>" class="gallery-img mt-2" alt="Featured Image">
                                    <% } %>
                                </div>
                            </div>

                            <!-- Quote and Difficulty Level -->
                            <div class="dashboard-box mb-4 border rounded p-4 bg-white">
                                <div class="custom-field-wrap">
                                    <h4 class="mb-3">Quote</h4>
                                    <div class="quote-entry mb-3">
                                        <div class="form-group">
                                            <label for="quote" class="form-label">Quote</label>
                                            <input type="text" name="quote" id="quote" class="form-control" value="<%= packageData.quote || '' %>" placeholder="e.g., Explore the world">
                                        </div>
                                    </div>
                                    <div class="form-group mt-3">
                                        <label for="difficultyLevel" class="form-label">Difficulty Level</label>
                                        <select name="difficultyLevel" id="difficultyLevel" class="form-control">
                                            <% ['Easy', 'Moderate', 'Challenging'].forEach(level => { %>
                                                <option value="<%= level %>" <%= packageData.difficultyLevel === level ? 'selected' : '' %>><%= level %></option>
                                            <% }) %>
                                        </select>
                                    </div>
                                </div>
                            </div>

                            <!-- Publish Status -->
                            <div class="dashboard-box mb-4 border rounded p-4 bg-white">
                                <div class="custom-field-wrap">
                                    <h4 class="mb-3">Publish Status</h4>
                                    <div class="form-group mb-3">
                                        <label for="status" class="form-label required-field">Status</label>
                                        <select name="status" id="status" class="form-control" required>
                                            <% ['Pending', 'Publish', 'Expired'].forEach(stat => { %>
                                                <option value="<%= stat %>" <%= packageData.status === stat ? 'selected' : '' %>><%= stat === 'Pending' ? 'Draft' : stat %></option>
                                            <% }) %>
                                        </select>
                                    </div>
                                    <div class="form-group">
                                        <button type="submit" class="btn btn-primary w-100">Save</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </form>
                <div id="form-error" class="text-danger d-none mt-3"></div>
            </div>
            <div class="copyrights text-center mt-4">
                Copyright © 2025 Travele. All rights reserved.
            </div>
        </div>
    </div>

    <style>
        .btn-draft { background-color: #6b7280 !important; color: white !important; border: 1px solid #4b5563; padding: 10px 20px; cursor: pointer; width: 100%; border-radius: 4px; transition: background-color 0.3s; }
        .btn-draft:hover { background-color: #4b5563 !important; }
        .btn-publish { background-color: #1d4ed8 !important; color: white !important; border: 1px solid #1e40af; padding: 10px 20px; cursor: pointer; width: 100%; border-radius: 4px; transition: background-color 0.3s; }
        .btn-publish:hover { background-color: #1e40af !important; }
        .upload-btn { display: inline-block; background-color: #10b981 !important; color: white !important; padding: 8px 16px; border-radius: 4px; text-decoration: none; cursor: pointer; }
        .upload-btn:hover { background-color: #059669 !important; }
        .add-link { display: inline-block; color: #10b981 !important; text-decoration: none; font-size: 16px; }
        .add-link:hover { color: #059669 !important; }
        .remove-btn { color: #dc3545 !important; text-decoration: none; font-size: 16px; display: inline-block; }
        .remove-btn:hover { color: #b02a37 !important; }
        .departure-entry, .inclusion-entry, .exclusion-entry, .activityType-entry, .highlight-entry { gap: 10px; }
        .form-control:invalid { border-color: #dc3545; }
        .form-control:valid { border-color: #28a745; }
        .gallery-img { width: 100px; height: 100px; object-fit: cover; border-radius: 4px; margin-right: 10px; }
        .required-field::after { content: '*'; color: #dc3545; margin-left: 4px; }
    </style>

    <script src="/admin/assets/js/jquery-3.2.1.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js"></script>
    <script src="/admin/assets/js/bootstrap.min.js"></script>
    <script src="/admin/assets/js/canvasjs.min.js"></script>
    <script src="/admin/assets/js/counterup.min.js"></script>
    <script src="/admin/assets/js/jquery.slicknav.js"></script>
    <script src="/admin/assets/js/dashboard-custom.js"></script>
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <script src="https://kit.fontawesome.com/a076d05399.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const daysInput = document.getElementById('days');
            const nightsInput = document.getElementById('nights');
            const totalDaysSpan = document.getElementById('total-days');
            const itineraryDays = document.getElementById('itinerary-days');
            const addDayLink = document.getElementById('add-day');
            const addCategoryBtn = document.getElementById('add-category-btn');
            const newCategoryInput = document.getElementById('new-category-input');
            const newCategoryField = document.getElementById('new-category');
            const addCategorySubmit = document.getElementById('add-category-submit');
            const categoryList = document.getElementById('category-list');
            const galleryInput = document.getElementById('gallery-input');
            const galleryError = document.getElementById('gallery-error');
            const galleryPreview = document.getElementById('gallery-preview');
            const featuredInput = document.getElementById('featured-input');
            const featuredFileName = document.getElementById('featured-file-name');
            const form = document.getElementById('edit-package-form');
            const formError = document.getElementById('form-error');
            const locationSearch = document.getElementById('location-search');
            const latitudeInput = document.getElementById('latitude');
            const longitudeInput = document.getElementById('longitude');
            const addressInput = document.getElementById('address');
            const addDepartureLink = document.getElementById('add-departure');
            const departuresContainer = document.getElementById('departures');
            const addInclusionLink = document.getElementById('add-inclusion');
            const inclusionsContainer = document.getElementById('inclusions');
            const addExclusionLink = document.getElementById('add-exclusion');
            const exclusionsContainer = document.getElementById('exclusions');
            const addActivityTypeLink = document.getElementById('add-activityType');
            const activityTypesContainer = document.getElementById('activityTypes');
            const addHighlightLink = document.getElementById('add-highlight');
            const highlightsContainer = document.getElementById('highlights');
            const statusSelect = document.getElementById('status');

            // Store itineraryDays in a JavaScript variable to avoid inline JSON
            const itineraryDaysData = <%- JSON.stringify(packageData.itineraryDays || []) %>;
            const departuresData = <%- JSON.stringify(packageData.multipleDepartures || []) %>;

            // OpenCage API key
            const OPENCAGE_API_KEY = '<%= opencageApiKey %>';

            // Initialize Leaflet map
            const map = L.map('map').setView([<%= packageData.latitude || 0 %>, <%= packageData.longitude || 0 %>], 15);
            L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
            }).addTo(map);
            const marker = L.marker([<%= packageData.latitude || 0 %>, <%= packageData.longitude || 0 %>], { draggable: true }).addTo(map);

            // Map click handler
            map.on('click', (e) => {
                const { lat, lng } = e.latlng;
                marker.setLatLng([lat, lng]);
                fetch(`https://api.opencagedata.com/geocode/v1/json?q=${lat}+${lng}&key=${OPENCAGE_API_KEY}`)
                    .then(response => response.json())
                    .then(data => {
                        if (data.results && data.results.length > 0) {
                            latitudeInput.value = lat;
                            longitudeInput.value = lng;
                            addressInput.value = data.results[0].formatted || '';
                        }
                    })
                    .catch(error => {
                        console.error('Reverse geocoding error:', error);
                        latitudeInput.value = lat;
                        longitudeInput.value = lng;
                        addressInput.value = '';
                    });
            });

            // Marker drag handler
            marker.on('dragend', (e) => {
                const { lat, lng } = e.target.getLatLng();
                fetch(`https://api.opencagedata.com/geocode/v1/json?q=${lat}+${lng}&key=${OPENCAGE_API_KEY}`)
                    .then(response => response.json())
                    .then(data => {
                        if (data.results && data.results.length > 0) {
                            latitudeInput.value = lat;
                            longitudeInput.value = lng;
                            addressInput.value = data.results[0].formatted || '';
                        }
                    })
                    .catch(error => {
                        console.error('Reverse geocoding error:', error);
                        latitudeInput.value = lat;
                        longitudeInput.value = lng;
                        addressInput.value = '';
                    });
            });

            // Location search handler
            locationSearch.addEventListener('input', (e) => {
                const query = e.target.value;
                if (query.length < 3) return;
                fetch(`https://api.opencagedata.com/geocode/v1/json?q=${encodeURIComponent(query)}&key=${OPENCAGE_API_KEY}`)
                    .then(response => response.json())
                    .then(data => {
                        if (data.results && data.results.length > 0) {
                            const { lat, lng } = data.results[0].geometry;
                            const formattedAddress = data.results[0].formatted;
                            map.setView([lat, lng], 15);
                            marker.setLatLng([lat, lng]);
                            latitudeInput.value = lat;
                            longitudeInput.value = lng;
                            addressInput.value = formattedAddress || '';
                        }
                    })
                    .catch(error => console.error('Search error:', error));
            });

            // Toggle required fields based on status
            function toggleRequiredFields() {
                const isPublish = statusSelect.value === 'Publish';
                const fields = [
                    { id: 'groupSize', label: 'Group Size' },
                    { id: 'days', label: 'Trip Duration' },
                    { id: 'nights', label: 'Trip Duration' },
                    { id: 'category', label: 'Category' },
                    { id: 'regularPrice', label: 'Regular Price' },
                    { id: 'itineraryDescription', label: 'Itinerary Description' },
                    { id: 'keywords', label: 'Keywords' },
                    { id: 'difficultyLevel', label: 'Difficulty Level' },
                    { id: 'location-search', label: 'Search Location' },
                    { id: 'gallery-input', label: 'Upload Images' },
                    { id: 'featured-input', label: 'Upload a Featured Image' },
                    { id: 'quote', label: 'Quote' }
                ];

                fields.forEach(field => {
                    const input = document.getElementById(field.id);
                    const label = document.querySelector(`label[for="${field.id}"]`);
                    if (input && label) {
                        if (isPublish) {
                            input.setAttribute('required', '');
                            label.classList.add('required-field');
                        } else {
                            input.removeAttribute('required');
                            label.classList.remove('required-field');
                        }
                    }
                });

                // Handle dynamic fields
                [ 'inclusions', 'exclusions', 'activityTypes', 'highlights'].forEach(container => {
                    const entries = document.querySelectorAll(`#${container} .${container.slice(0, -1)}-entry`);
                    entries.forEach(entry => {
                        entry.querySelectorAll('input').forEach(input => {
                            input.required = isPublish;
                            const inputLabel = entry.querySelector(`label[for="${input.id}"]`);
                            if (inputLabel) inputLabel.classList.toggle('required-field', isPublish);
                        });
                    });
                });

                // Handle itinerary days
                const itineraryEntries = document.querySelectorAll('#itinerary-days .itinerary-content');
                itineraryEntries.forEach(entry => {
                    entry.querySelectorAll('input, textarea').forEach(input => {
                        input.required = isPublish;
                        const inputLabel = entry.querySelector(`label[for="${input.id}"]`);
                        if (inputLabel) inputLabel.classList.toggle('required-field', isPublish);
                    });
                });

                // Handle additional categories
                const categoryInputs = document.querySelectorAll('#category-list input[type="checkbox"]');
                if (isPublish && categoryInputs.length > 0) {
                    const isChecked = Array.from(categoryInputs).some(input => input.checked);
                    categoryInputs.forEach(input => input.required = !isChecked);
                } else {
                    categoryInputs.forEach(input => input.required = false);
                }
            }

            statusSelect.addEventListener('change', toggleRequiredFields);

            // Itinerary management
            let dayCount = <%= packageData.tripDuration?.days || 0 %>;
            function updateItinerary() {
                const days = parseInt(daysInput.value) || 0;
                totalDaysSpan.textContent = `${days} days`;
                itineraryDays.innerHTML = '';
                dayCount = days;
                for (let i = 1; i <= days; i++) {
                    const day = itineraryDaysData[i-1] || { title: '', description: '' };
                    const dayDiv = document.createElement('div');
                    dayDiv.className = 'form-group itinerary-content mb-3';
                    dayDiv.innerHTML = `
                        <h5>Day ${i}</h5>
                        <div class="d-flex align-items-center mb-2">
                            <div class="flex-grow-1 me-2">
                                <label for="dayTitle${i}" class="form-label">Title</label>
                                <input type="text" name="itineraryDays[${i-1}][title]" id="dayTitle${i}" class="form-control" value="${(day.title || '').replace(/"/g, '&quot;')}">
                            </div>
                            <div>
                                <a href="#" class="remove-btn ${dayCount === 1 ? 'd-none' : ''}"><i class="fas fa-minus"></i></a>
                            </div>
                        </div>
                        <label for="dayDescription${i}" class="form-label">Description</label>
                        <textarea name="itineraryDays[${i-1}][description]" id="dayDescription${i}" class="form-control mb-2" rows="3">${(day.description || '').replace(/</g, '&lt;').replace(/>/g, '&gt;')}</textarea>
                    `;
                    itineraryDays.appendChild(dayDiv);
                    if (statusSelect.value === 'Publish') {
                        dayDiv.querySelectorAll('input, textarea').forEach(input => {
                            input.required = true;
                            const inputLabel = dayDiv.querySelector(`label[for="${input.id}"]`);
                            if (inputLabel) inputLabel.classList.add('required-field');
                        });
                    }
                }
                updateItineraryIndices();
            }

            function updateItineraryIndices() {
                const days = itineraryDays.querySelectorAll('.itinerary-content');
                days.forEach((day, index) => {
                    day.querySelector('h5').textContent = `Day ${index + 1}`;
                    day.querySelector('input').name = `itineraryDays[${index}][title]`;
                    day.querySelector('textarea').name = `itineraryDays[${index}][description]`;
                    day.querySelector('input').id = `dayTitle${index + 1}`;
                    day.querySelector('textarea').id = `dayDescription${index + 1}`;
                    const removeBtn = day.querySelector('.remove-btn');
                    if (days.length === 1) {
                        removeBtn.classList.add('d-none');
                    } else {
                        removeBtn.classList.remove('d-none');
                    }
                    if (statusSelect.value === 'Publish') {
                        day.querySelectorAll('input, textarea').forEach(input => {
                            input.required = true;
                            const inputLabel = day.querySelector(`label[for="${input.id}"]`);
                            if (inputLabel) inputLabel.classList.add('required-field');
                        });
                    }
                });
            }

            daysInput.addEventListener('input', () => {
                updateItinerary();
                toggleRequiredFields();
            });

            nightsInput.addEventListener('input', updateItinerary);

            addDayLink.addEventListener('click', (e) => {
                e.preventDefault();
                dayCount++;
                totalDaysSpan.textContent = `${dayCount} days`;
                const dayDiv = document.createElement('div');
                dayDiv.className = 'form-group itinerary-content mb-3';
                dayDiv.innerHTML = `
                    <h5>Day ${dayCount}</h5>
                    <div class="d-flex align-items-center mb-2">
                        <div class="flex-grow-1 me-2">
                            <label for="dayTitle${dayCount}" class="form-label">Title</label>
                            <input type="text" name="itineraryDays[${dayCount-1}][title]" id="dayTitle${dayCount}" class="form-control">
                        </div>
                        <div>
                            <a href="#" class="remove-btn"><i class="fas fa-minus"></i></a>
                        </div>
                    </div>
                    <label for="dayDescription${dayCount}" class="form-label">Description</label>
                    <textarea name="itineraryDays[${dayCount-1}][description]" id="dayDescription${dayCount}" class="form-control mb-2" rows="3"></textarea>
                `;
                itineraryDays.appendChild(dayDiv);

                if (statusSelect.value === 'Publish') {
                    dayDiv.querySelectorAll('input, textarea').forEach(input => {
                        input.required = true;
                        const inputLabel = dayDiv.querySelector(`label[for="${input.id}"]`);
                        if (inputLabel) inputLabel.classList.add('required-field');
                    });
                }
                updateItineraryIndices();
                toggleRequiredFields();
            });

            itineraryDays.addEventListener('click', (e) => {
                const btn = e.target.closest('.remove-btn');
                if (btn && dayCount > 1) {
                    e.preventDefault();
                    btn.closest('.itinerary-content').remove();
                    dayCount--;
                    totalDaysSpan.textContent = `${dayCount} days`;
                    updateItineraryIndices();
                    toggleRequiredFields();
                }
            });

            // Departures management
            let departureCount = <%= packageData.multipleDepartures?.length || 1 %>;
            addDepartureLink.addEventListener('click', (e) => {
                e.preventDefault();
                const departureDiv = document.createElement('div');
                departureDiv.className = 'departure-entry mb-3 d-flex align-items-center';
                departureDiv.innerHTML = `
                    <div class="flex-grow-1 me-2">
                        <div class="form-group">
                            <label for="departureLocation${departureCount}" class="form-label">Departure Location</label>
                            <input type="text" name="multipleDepartures[${departureCount}][location]" id="departureLocation${departureCount}" class="form-control">
                        </div>
                    </div>
                    <div class="me-2">
                        <div class="form-group">
                            <label for="departureDateTime${departureCount}" class="form-label">Departure Date and Time</label>
                            <input type="datetime-local" name="multipleDepartures[${departureCount}][dateTime]" id="departureDateTime${departureCount}" class="form-control">
                        </div>
                    </div>
                    <div>
                        <a href="#" class="remove-btn"><i class="fas fa-minus"></i></a>
                    </div>
                `;
                departuresContainer.appendChild(departureDiv);

                if (statusSelect.value === 'Publish') {
                    departureDiv.querySelectorAll('input').forEach(input => {
                        input.required = true;
                        const inputLabel = departureDiv.querySelector(`label[for="${input.id}"]`);
                        if (inputLabel) inputLabel.classList.add('required-field');
                    });
                }
                departureCount++;
                updateDepartureIndices();
                toggleRequiredFields();
            });

            departuresContainer.addEventListener('click', (e) => {
                const btn = e.target.closest('.remove-btn');
                if (btn && departureCount > 1) {
                    e.preventDefault();
                    btn.closest('.departure-entry').remove();
                    departureCount--;
                    updateDepartureIndices();
                    toggleRequiredFields();
                }
            });

            function updateDepartureIndices() {
                const departures = departuresContainer.querySelectorAll('.departure-entry');
                departures.forEach((dep, index) => {
                    dep.querySelector('input[type="text"]').name = `multipleDepartures[${index}][location]`;
                    dep.querySelector('input[type="datetime-local"]').name = `multipleDepartures[${index}][dateTime]`;
                    dep.querySelector('input[type="text"]').id = `departureLocation${index}`;
                    dep.querySelector('input[type="datetime-local"]').id = `departureDateTime${index}`;
                    const removeBtn = dep.querySelector('.remove-btn');
                    if (departures.length === 1) {
                        removeBtn.classList.add('d-none');
                    } else {
                        removeBtn.classList.remove('d-none');
                    }
                    // if (statusSelect.value === 'Publish') {
                    //     dep.querySelectorAll('input').forEach(input => {
                    //         input.required = true;
                    //         const inputLabel = dep.querySelector(`label[for="${input.id}"]`);
                    //         // if (inputLabel) inputLabel.classList.add('required-field');
                    //     });
                    // }
                });
            }

            // Inclusions management
            let inclusionCount = <%= packageData.inclusions?.length || 1 %>;
            addInclusionLink.addEventListener('click', (e) => {
                e.preventDefault();
                const inclusionDiv = document.createElement('div');
                inclusionDiv.className = 'inclusion-entry mb-3 d-flex align-items-center';
                inclusionDiv.innerHTML = `
                    <div class="flex-grow-1 me-2">
                        <input type="text" name="inclusions[${inclusionCount}]" class="form-control" placeholder="e.g., Meals">
                    </div>
                    <div>
                        <a href="#" class="remove-btn"><i class="fas fa-minus"></i></a>
                    </div>
                `;
                inclusionsContainer.appendChild(inclusionDiv);

                if (statusSelect.value === 'Publish') inclusionDiv.querySelector('input').required = true;
                inclusionCount++;
                updateInclusionIndices();
                toggleRequiredFields();
            });

            inclusionsContainer.addEventListener('click', (e) => {
                const btn = e.target.closest('.remove-btn');
                if (btn && inclusionCount > 1) {
                    e.preventDefault();
                    btn.closest('.inclusion-entry').remove();
                    inclusionCount--;
                    updateInclusionIndices();
                    toggleRequiredFields();
                }
            });

            function updateInclusionIndices() {
                const inclusions = inclusionsContainer.querySelectorAll('.inclusion-entry');
                inclusions.forEach((inc, index) => {
                    inc.querySelector('input').name = `inclusions[${index}]`;
                    const removeBtn = inc.querySelector('.remove-btn');
                    if (inclusions.length === 1) {
                        removeBtn.classList.add('d-none');
                    } else {
                        removeBtn.classList.remove('d-none');
                    }
                    if (statusSelect.value === 'Publish') inc.querySelector('input').required = true;
                });
            }

            // Exclusions management
            let exclusionCount = <%= packageData.exclusions?.length || 1 %>;
            addExclusionLink.addEventListener('click', (e) => {
                e.preventDefault();
                const exclusionDiv = document.createElement('div');
                exclusionDiv.className = 'exclusion-entry mb-3 d-flex align-items-center';
                exclusionDiv.innerHTML = `
                    <div class="flex-grow-1 me-2">
                        <input type="text" name="exclusions[${exclusionCount}]" class="form-control" placeholder="e.g., Airfare">
                    </div>
                    <div>
                        <a href="#" class="remove-btn"><i class="fas fa-minus"></i></a>
                    </div>
                `;
                exclusionsContainer.appendChild(exclusionDiv);

                if (statusSelect.value === 'Publish') exclusionDiv.querySelector('input').required = true;
                exclusionCount++;
                updateExclusionIndices();
                toggleRequiredFields();
            });

            exclusionsContainer.addEventListener('click', (e) => {
                const btn = e.target.closest('.remove-btn');
                if (btn && exclusionCount > 1) {
                    e.preventDefault();
                    btn.closest('.exclusion-entry').remove();
                    exclusionCount--;
                    updateExclusionIndices();
                    toggleRequiredFields();
                }
            });

            function updateExclusionIndices() {
                const exclusions = exclusionsContainer.querySelectorAll('.exclusion-entry');
                exclusions.forEach((exc, index) => {
                    exc.querySelector('input').name = `exclusions[${index}]`;
                    const removeBtn = exc.querySelector('.remove-btn');
                    if (exclusions.length === 1) {
                        removeBtn.classList.add('d-none');
                    } else {
                        removeBtn.classList.remove('d-none');
                    }
                    if (statusSelect.value === 'Publish') exc.querySelector('input').required = true;
                });
            }

            // Activity Types management
            let activityTypeCount = <%= packageData.activityTypes?.length || 1 %>;
            addActivityTypeLink.addEventListener('click', (e) => {
                e.preventDefault();
                const activityTypeDiv = document.createElement('div');
                activityTypeDiv.className = 'activityType-entry mb-3 d-flex align-items-center';
                activityTypeDiv.innerHTML = `
                    <div class="flex-grow-1 me-2">
                        <input type="text" name="activityTypes[${activityTypeCount}]" class="form-control" placeholder="e.g., Hiking">
                    </div>
                    <div>
                        <a href="#" class="remove-btn"><i class="fas fa-minus"></i></a>
                    </div>
                `;
                activityTypesContainer.appendChild(activityTypeDiv);

                if (statusSelect.value === 'Publish') activityTypeDiv.querySelector('input').required = true;
                activityTypeCount++;
                updateActivityTypeIndices();
                toggleRequiredFields();
            });

            activityTypesContainer.addEventListener('click', (e) => {
                const btn = e.target.closest('.remove-btn');
                if (btn && activityTypeCount > 1) {
                    e.preventDefault();
                    btn.closest('.activityType-entry').remove();
                    activityTypeCount--;
                    updateActivityTypeIndices();
                    toggleRequiredFields();
                }
            });

            function updateActivityTypeIndices() {
                const activityTypes = activityTypesContainer.querySelectorAll('.activityType-entry');
                activityTypes.forEach((act, index) => {
                    act.querySelector('input').name = `activityTypes[${index}]`;
                    const removeBtn = act.querySelector('.remove-btn');
                    if (activityTypes.length === 1) {
                        removeBtn.classList.add('d-none');
                    } else {
                        removeBtn.classList.remove('d-none');
                    }
                    if (statusSelect.value === 'Publish') act.querySelector('input').required = true;
                });
            }

            // Highlights management
            let highlightCount = <%= packageData.highlights?.length || 1 %>;
            addHighlightLink.addEventListener('click', (e) => {
                e.preventDefault();
                const highlightDiv = document.createElement('div');
                highlightDiv.className = 'highlight-entry mb-3 d-flex align-items-center';
                highlightDiv.innerHTML = `
                    <div class="flex-grow-1 me-2">
                        <input type="text" name="highlights[${highlightCount}]" class="form-control" placeholder="e.g., Scenic views">
                    </div>
                    <div>
                        <a href="#" class="remove-btn"><i class="fas fa-minus"></i></a>
                    </div>
                `;
                highlightsContainer.appendChild(highlightDiv);

                if (statusSelect.value === 'Publish') highlightDiv.querySelector('input').required = true;
                highlightCount++;
                updateHighlightIndices();
                toggleRequiredFields();
            });

            highlightsContainer.addEventListener('click', (e) => {
                const btn = e.target.closest('.remove-btn');
                if (btn && highlightCount > 1) {
                    e.preventDefault();
                    btn.closest('.highlight-entry').remove();
                    highlightCount--;
                    updateHighlightIndices();
                    toggleRequiredFields();
                }
            });

            function updateHighlightIndices() {
                const highlights = highlightsContainer.querySelectorAll('.highlight-entry');
                highlights.forEach((hig, index) => {
                    hig.querySelector('input').name = `highlights[${index}]`;
                    const removeBtn = hig.querySelector('.remove-btn');
                    if (highlights.length === 1) {
                        removeBtn.classList.add('d-none');
                    } else {
                        removeBtn.classList.remove('d-none');
                    }
                    if (statusSelect.value === 'Publish') hig.querySelector('input').required = true;
                });
            }

            // Add new category
            addCategoryBtn.addEventListener('click', (e) => {
                e.preventDefault();
                newCategoryInput.classList.toggle('d-none');
            });

            addCategorySubmit.addEventListener('click', () => {
                const newCategory = newCategoryField.value.trim();
                if (newCategory) {
                    const categoryDiv = document.createElement('div');
                    categoryDiv.className = 'form-group mb-2';
                    categoryDiv.innerHTML = `
                        <label class="custom-input">
                            <input type="checkbox" name="additionalCategories[]" value="${newCategory}" checked>
                            <span class="custom-input-field"></span>
                            ${newCategory}
                        </label>
                    `;
                    categoryList.appendChild(categoryDiv);

                    if (statusSelect.value === 'Publish') categoryDiv.querySelector('input').required = true;
                    newCategoryField.value = '';
                    newCategoryInput.classList.add('d-none');
                    toggleRequiredFields();
                }
            });

            // Handle gallery input
            galleryInput.addEventListener('change', () => {
                const totalImages = galleryPreview.querySelectorAll('.gallery-img-container').length + galleryInput.files.length;
                if (totalImages > 8) {
                    galleryError.classList.remove('d-none');
                    galleryInput.value = '';
                } else {
                    galleryError.classList.add('d-none');
                    for (let file of galleryInput.files) {
                        const reader = new FileReader();
                        reader.onload = (e) => {
                            const container = document.createElement('div');
                            container.className = 'col-auto gallery-img-container';
                            container.innerHTML = `
                                <img src="${e.target.result}" class="gallery-img" alt="Gallery Image">
                                <a href="#" class="remove-btn mt-1"><i class="fas fa-minus"></i></a>
                            `;
                            galleryPreview.appendChild(container);

                            container.querySelector('.remove-btn').addEventListener('click', (e) => {
                                e.preventDefault();
                                container.remove();
                                galleryInput.value = '';
                                toggleRequiredFields();
                            });
                        };
                        reader.readAsDataURL(file);
                    }
                }
            });

            galleryPreview.addEventListener('click', (e) => {
                const btn = e.target.closest('.remove-btn');
                if (btn) {
                    e.preventDefault();
                    const container = btn.closest('.gallery-img-container');
                    const imageName = container.querySelector('input[name^="existingImages"]')?.value;
                    if (imageName) {
                        const deletedImagesInput = document.createElement('input');
                        deletedImagesInput.type = 'hidden';
                        deletedImagesInput.name = 'deletedImages[]';
                        deletedImagesInput.value = imageName;
                        form.appendChild(deletedImagesInput);
                    }
                    container.remove();
                    toggleRequiredFields();
                }
            });

            // Handle featured image input
            featuredInput.addEventListener('change', () => {
                if (featuredInput.files.length > 0) {
                    featuredFileName.textContent = featuredInput.files[0].name;
                    const reader = new FileReader();
                    reader.onload = (e) => {
                        const img = document.createElement('img');
                        img.src = e.target.result;
                        img.className = 'gallery-img mt-2';
                        img.alt = 'Featured Image';
                        const existingImg = featuredFileName.nextElementSibling;
                        if (existingImg && existingImg.tagName === 'IMG') existingImg.remove();
                        featuredFileName.insertAdjacentElement('afterend', img);
                    };
                    reader.readAsDataURL(featuredInput.files[0]);
                }
            });

            // Form submission
            form.addEventListener('submit', (e) => {
                e.preventDefault();
                toggleRequiredFields();
                if (!form.checkValidity()) {
                    formError.textContent = 'Please fill all required fields';
                    formError.classList.remove('d-none');
                    form.classList.add('was-validated');
                    return;
                }
                const formData = new FormData(form);
                fetch(form.action, {
                    method: 'POST',
                    body: formData
                })
                .then(response => {
                    if (!response.ok) throw new Error('Network response was not ok');
                    return response.json();
                })
                .then(data => {
                    if (data.error) {
                        formError.textContent = data.error;
                        formError.classList.remove('d-none');
                    } else {
                        window.location.href = '/db-all-packages';
                    }
                })
                .catch(error => {
                    console.error('Form submission error:', error);
                    formError.textContent = 'Failed to update package';
                    formError.classList.remove('d-none');
                });
            });

            form.classList.add('needs-validation');
            form.setAttribute('novalidate', '');
            toggleRequiredFields();
            updateDepartureIndices();
            updateInclusionIndices();
            updateExclusionIndices();
            updateActivityTypeIndices();
            updateHighlightIndices();
        });
    </script>
</body>
</html>